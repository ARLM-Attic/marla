/* parser generated by jison 0.4.15 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var parser = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,5],$V1=[1,7],$V2=[1,8],$V3=[1,9],$V4=[5,6],$V5=[5,6,17],$V6=[2,18],$V7=[1,15],$V8=[1,14],$V9=[1,16],$Va=[5,6,16,17,27,31],$Vb=[2,20],$Vc=[1,23],$Vd=[1,28],$Ve=[1,31],$Vf=[1,29],$Vg=[1,30],$Vh=[1,32],$Vi=[1,33],$Vj=[5,6,17,27],$Vk=[1,37],$Vl=[1,42],$Vm=[1,63],$Vn=[1,56],$Vo=[1,55],$Vp=[1,64],$Vq=[1,59],$Vr=[1,60],$Vs=[1,61],$Vt=[1,62],$Vu=[1,54],$Vv=[5,6,17,24,27,33,36,44,47,48],$Vw=[1,67],$Vx=[1,68],$Vy=[5,6,17,24,27,33,36,44,47,48,49,50,54],$Vz=[33,36],$VA=[1,85],$VB=[5,6,33,36,98,100],$VC=[1,89],$VD=[5,6,33,36,44,58,61,62,69,94,98,100],$VE=[1,90],$VF=[5,6,33,36,44,58,61,62,69,93,94,98,100],$VG=[1,91],$VH=[5,6,33,36,44,58,61,62,69,91,93,94,98,100],$VI=[1,92],$VJ=[1,94],$VK=[1,93],$VL=[1,95],$VM=[5,6,22,24,33,36,44,58,61,62,69,88,89,91,93,94,98,100],$VN=[1,97],$VO=[1,96],$VP=[5,6,22,24,33,36,44,58,61,62,69,79,86,88,89,91,93,94,98,100],$VQ=[1,98],$VR=[1,99],$VS=[5,6,22,24,33,36,44,58,61,62,69,79,83,84,86,88,89,91,93,94,98,100],$VT=[2,86],$VU=[1,101],$VV=[5,6,22,24,31,33,36,44,50,58,61,62,69,79,83,84,86,88,89,91,93,94,98,100],$VW=[14,16,26,43,72,73,74,75,79],$VX=[2,68],$VY=[1,107],$VZ=[24,36],$V_=[1,130],$V$=[44,69],$V01=[1,160],$V11=[1,162],$V21=[1,163],$V31=[5,6,33,36,69,98,100],$V41=[1,178],$V51=[1,194],$V61=[5,6,33,36,44,69,98,100],$V71=[5,17],$V81=[1,210],$V91=[1,232];
var parser = {trace: function trace() { },
yy: {},
symbols_: {"error":2,"module":3,"module_member_list":4,"LF":5,"EOF":6,"module_member":7,"type_decl":8,"member_head":9,"member_type":10,"member_body":11,"params":12,"IMPORT":13,"STRING":14,"TYPE":15,"IDENTIFIER":16,"=":17,"NOTIMPL":18,"INDENT":19,"type_members":20,"OUTDENT":21,"<":22,"type_params":23,">":24,"type_member":25,"!":26,":":27,"typeref":28,"expr_or_block":29,"|":30,"(":31,"type_case_data_list":32,")":33,"param_list":34,"param":35,",":36,"primary_typeref":37,"type_case_data":38,"type_param":39,"SQ":40,"fun_typeref":41,"type_args":42,"{":43,"}":44,"tuple_type_args":45,"[":46,"]":47,"\\":48,"?":49,".":50,"member_ref":51,"tuple_type_arg":52,"type_arg":53,"ARROW":54,"expr":55,"stmt_list":56,"or_expr":57,"WHERE":58,"rec_binding_inline_list":59,"rec_binding_block_list":60,"IF":61,"ELSE":62,"expr_ww":63,"primary_expr":64,"literal":65,"map_ctor_expr":66,"map_ctor_element_inline":67,"map_ctor_element_inline_list":68,";":69,"map_ctor_element_block":70,"map_ctor_element_block_list":71,"FLOAT":72,"INT":73,"TRUE":74,"FALSE":75,"postfix_expr":76,"unary_expr":77,"unary_op":78,"-":79,"application_arg_list":80,"application_expr":81,"mul_expr":82,"*":83,"/":84,"add_expr":85,"+":86,"rel_expr":87,"LE_OP":88,"GE_OP":89,"eq_expr":90,"EQ_OP":91,"and_expr":92,"LOGICAL_AND_OP":93,"LOGICAL_OR_OP":94,"rec_binding_inline":95,"rec_binding_block":96,"stmt":97,"ASSIGN_OP":98,"FOR":99,"RANGE":100,"$accept":0,"$end":1},
terminals_: {2:"error",5:"LF",6:"EOF",8:"type_decl",13:"IMPORT",14:"STRING",15:"TYPE",16:"IDENTIFIER",17:"=",18:"NOTIMPL",19:"INDENT",21:"OUTDENT",22:"<",24:">",26:"!",27:":",30:"|",31:"(",33:")",36:",",40:"SQ",43:"{",44:"}",46:"[",47:"]",48:"\\",49:"?",50:".",54:"ARROW",58:"WHERE",61:"IF",62:"ELSE",69:";",72:"FLOAT",73:"INT",74:"TRUE",75:"FALSE",79:"-",83:"*",84:"/",86:"+",88:"LE_OP",89:"GE_OP",91:"EQ_OP",93:"LOGICAL_AND_OP",94:"LOGICAL_OR_OP",98:"ASSIGN_OP",99:"FOR",100:"RANGE"},
productions_: [0,[3,3],[3,2],[3,1],[7,1],[7,3],[7,4],[7,2],[7,4],[7,9],[7,12],[4,1],[4,3],[20,1],[20,3],[9,1],[9,2],[10,2],[10,0],[11,2],[11,0],[25,2],[25,5],[25,4],[25,3],[25,4],[12,1],[12,3],[12,2],[34,1],[34,3],[35,1],[35,3],[32,1],[32,3],[38,3],[39,2],[23,1],[23,3],[28,1],[37,1],[37,4],[37,2],[37,5],[37,3],[37,3],[37,3],[37,3],[37,2],[37,2],[37,3],[51,1],[45,1],[45,3],[52,1],[42,1],[42,3],[53,1],[41,1],[41,3],[29,1],[29,6],[55,1],[55,3],[55,8],[55,5],[63,1],[63,5],[64,1],[64,1],[64,1],[67,3],[68,1],[68,3],[70,3],[71,1],[71,3],[66,3],[66,9],[65,1],[65,1],[65,1],[65,1],[65,1],[76,1],[76,3],[77,1],[77,2],[78,1],[78,1],[80,1],[80,3],[81,1],[81,4],[81,3],[82,1],[82,3],[82,3],[85,1],[85,3],[85,3],[87,1],[87,3],[87,3],[87,3],[87,3],[90,1],[90,3],[92,1],[92,3],[57,1],[57,3],[95,3],[59,1],[59,3],[96,3],[60,1],[60,3],[97,3],[97,5],[97,1],[97,3],[97,8],[97,12],[56,1],[56,3]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
return new ast.Module($$[$0-2]);
break;
case 2:
return new ast.Module($$[$0-1]);
break;
case 3:
return new ast.Module([]);
break;
case 4: case 15: case 17: case 19: case 54: case 57: case 58: case 60: case 62: case 66: case 70: case 84: case 86: case 92: case 95:
this.$=$$[$0];
break;
case 5:
this.$=new ast.DataModuleMember($$[$0-2],$$[$0-1],$$[$0]);
break;
case 6:
this.$=new ast.FunModuleMember($$[$0-3],$$[$0-2],$$[$0-1],$$[$0]);
break;
case 7:
this.$=$$[$0]+"";
break;
case 8:
this.$=new ast.TypeModuleMember($$[$0-2],[],[]);
break;
case 9:
this.$=new ast.TypeModuleMember($$[$0-7],[],$$[$0-2]);
break;
case 10:
this.$=new ast.TypeModuleMember($$[$0-10],$$[$0-8],$$[$0-2]);
break;
case 11: case 13: case 26: case 29: case 33: case 37: case 52: case 55: case 90: case 124:
this.$=[$$[$0]];
break;
case 12: case 14: case 30: case 34: case 38: case 53: case 56: case 91: case 125:
$$[$0-2].push($$[$0]);this.$=$$[$0-2];
break;
case 16: case 27:
this.$=$$[$0-1];
break;
case 18: case 20:
this.$=null;
break;
case 21:
this.$=new ast.CaseTypeMember($$[$0], []);
break;
case 22:
this.$=new ast.CaseTypeMember($$[$0-3], $$[$0-1]);
break;
case 23:
this.$=new ast.CaseTypeMember($$[$0-2], []);
break;
case 24:
this.$=new ast.DataTypeMember($$[$0-2],$$[$0-1],$$[$0]);
break;
case 25:
this.$=new ast.FunTypeMember($$[$0-3],$$[$0-2],$$[$0-1],$$[$0]);
break;
case 28:
this.$=[];
break;
case 35:
this.$=new ast.DataTypeMember($$[$0-2],$$[$0],null);
break;
case 36:
this.$="'"+$$[$0];
break;
case 40:
this.$=new ast.NamedTyperef($$[$0],[]);
break;
case 41:
this.$=new ast.NamedTyperef($$[$0-3],$$[$0-1]);
break;
case 42:
this.$=new ast.NamedTyperef("'"+$$[$0],[]);
break;
case 43:
this.$=new ast.NamedTyperef("Map", [$$[$0-3],$$[$0-1]]);
break;
case 44:
this.$=new ast.NamedTyperef("Tuple", $$[$0-1]);
break;
case 45:
this.$=new ast.NamedTyperef("Array", [$$[$0-1]]);
break;
case 46:
this.$=new ast.NamedTyperef("Set", [$$[$0-1]]);
break;
case 47:
this.$=new ast.NamedTyperef("Seq", [$$[$0-1]]);
break;
case 48:
this.$=new ast.UnitTyperef();
break;
case 49:
this.$=new ast.NamedTyperef("Option", [$$[$0-1]]);
break;
case 50:
this.$=new ast.MemberTyperef($$[$0-2], [$$[$0]]);
break;
case 59:
this.$=new ast.NamedTyperef("Fun", [$$[$0-2],$$[$0]]);
break;
case 61:
this.$=new ast.BlockExpr($$[$0-2]);
break;
case 63:
this.$=new ast.WhereExpr($$[$0-2], $$[$0]);
break;
case 64:
this.$=new ast.WhereExpr($$[$0-7], $$[$0-2]);
break;
case 65: case 67:
this.$=new ast.IfExpr($$[$0-4], $$[$0-2], $$[$0]);
break;
case 68:
this.$=new ast.VarExpr($$[$0]);
break;
case 69:
this.$=new ast.LiteralExpr($$[$0]);
break;
case 79:
this.$=new ast.FloatLiteral($$[$0]);
break;
case 80:
this.$=new ast.IntLiteral($$[$0]);
break;
case 81:
this.$=new ast.BoolLiteral(true);
break;
case 82:
this.$=new ast.BoolLiteral(false);
break;
case 83:
this.$=new ast.StringLiteral($$[$0]);
break;
case 85:
this.$=new ast.MemberExpr($$[$0-2],$$[$0]);
break;
case 93:
this.$=new ast.ApplyExpr($$[$0-3], $$[$0-1]);
break;
case 94:
this.$=new ast.ApplyExpr($$[$0-2], []);
break;
case 99:
this.$=new ast.ApplyExpr(new ast.VarExpr("+"), [$$[$0-2], $$[$0]]);
break;
case 100:
this.$=new ast.ApplyExpr(new ast.VarExpr("-"), [$$[$0-2], $$[$0]]);
break;
case 118:
this.$=new ast.LetStmt($$[$0-2], null, $$[$0]);
break;
case 119:
this.$=new ast.LetStmt($$[$0-4], $$[$0-2], $$[$0]);
break;
case 120:
this.$=new ast.ExprStmt($$[$0]);
break;
case 121:
this.$=new ast.AssignStmt($$[$0-2], $$[$0]);
break;
case 122:
this.$=new ast.IfStmt($$[$0-6], $$[$0-2], []);
break;
case 123:
this.$=new ast.ForRangeStmt($$[$0-10], $$[$0-8], $$[$0-6], "<", $$[$0-2]);
break;
}
},
table: [{3:1,4:2,6:[1,3],7:4,8:$V0,9:6,13:$V1,15:$V2,16:$V3},{1:[3]},{5:[1,10],6:[1,11]},{1:[2,3]},o($V4,[2,11]),o($V4,[2,4]),o($V5,$V6,{10:12,12:13,16:$V7,27:$V8,31:$V9}),{14:[1,17]},{16:[1,18]},o($Va,[2,15],{26:[1,19]}),{6:[1,20],7:21,8:$V0,9:6,13:$V1,15:$V2,16:$V3},{1:[2,2]},o($V4,$Vb,{11:22,17:$Vc}),o($V5,$V6,{10:24,27:$V8}),{16:$Vd,28:25,31:$Ve,37:27,40:$Vf,41:26,43:$Vg,46:$Vh,48:$Vi},o($Vj,[2,26]),{16:$Vk,33:[1,35],34:34,35:36},o($V4,[2,7]),{17:[1,38],22:[1,39]},o($Va,[2,16]),{1:[2,1]},o($V4,[2,12]),o($V4,[2,5]),{5:$Vl,14:$Vm,16:$Vn,26:$Vo,29:40,43:$Vp,55:41,57:43,64:53,65:57,66:58,72:$Vq,73:$Vr,74:$Vs,75:$Vt,76:51,77:50,78:52,79:$Vu,81:49,82:48,85:47,87:46,90:45,92:44},o($V4,$Vb,{11:65,17:$Vc}),o($V5,[2,17]),o($Vv,[2,39]),o($Vv,[2,58],{49:$Vw,50:$Vx,54:[1,66]}),o($Vy,[2,40],{22:[1,69]}),{16:[1,70]},{16:$Vd,28:71,31:$Ve,37:27,40:$Vf,41:26,43:$Vg,46:$Vh,48:$Vi},{16:$Vd,28:75,31:$Ve,33:[1,73],37:27,40:$Vf,41:26,43:$Vg,45:72,46:$Vh,48:$Vi,52:74},{16:$Vd,28:76,31:$Ve,37:27,40:$Vf,41:26,43:$Vg,46:$Vh,48:$Vi},{16:$Vd,28:77,31:$Ve,37:27,40:$Vf,41:26,43:$Vg,46:$Vh,48:$Vi},{33:[1,78],36:[1,79]},o($Vj,[2,28]),o($Vz,[2,29]),o($Vz,[2,31],{27:[1,80]}),{5:[1,82],18:[1,81]},{23:83,39:84,40:$VA},o($V4,[2,19]),o($V4,[2,60]),{19:[1,86]},o($VB,[2,62],{58:[1,87],61:[1,88],94:$VC}),o($VD,[2,110],{93:$VE}),o($VF,[2,108],{91:$VG}),o($VH,[2,106],{22:$VI,24:$VJ,88:$VK,89:$VL}),o($VM,[2,101],{79:$VN,86:$VO}),o($VP,[2,98],{83:$VQ,84:$VR}),o($VS,[2,95]),o($VS,[2,92]),o($VS,$VT,{31:[1,100],50:$VU}),{14:$Vm,16:$Vn,26:$Vo,43:$Vp,64:53,65:57,66:58,72:$Vq,73:$Vr,74:$Vs,75:$Vt,76:103,77:102,78:52,79:$Vu},o($VV,[2,84]),o($VW,[2,88]),o($VW,[2,89]),o($VV,$VX),o($VV,[2,69]),o($VV,[2,70]),o($VV,[2,79]),o($VV,[2,80]),o($VV,[2,81]),o($VV,[2,82]),o($VV,[2,83]),{5:[1,105],16:$VY,67:106,68:104},o($V4,[2,6]),{16:$Vd,31:$Ve,37:108,40:$Vf,43:$Vg,46:$Vh,48:$Vi},o($Vy,[2,49]),{16:[1,110],51:109},{16:$Vd,28:113,31:$Ve,37:27,40:$Vf,41:26,42:111,43:$Vg,46:$Vh,48:$Vi,53:112},o($Vy,[2,42]),{27:[1,114],44:[1,115]},{33:[1,116],36:[1,117]},o($Vy,[2,48]),o($Vz,[2,52]),o($Vz,[2,54]),{47:[1,118]},{48:[1,119]},o($Vj,[2,27]),{16:$Vk,35:120},{16:$Vd,31:$Ve,37:121,40:$Vf,43:$Vg,46:$Vh,48:$Vi},o($V4,[2,8]),{19:[1,122]},{24:[1,123],36:[1,124]},o($VZ,[2,37]),{16:[1,125]},{5:[1,126]},{5:[1,128],16:$V_,59:127,95:129},{14:$Vm,16:$Vn,26:$Vo,43:$Vp,57:131,64:53,65:57,66:58,72:$Vq,73:$Vr,74:$Vs,75:$Vt,76:51,77:50,78:52,79:$Vu,81:49,82:48,85:47,87:46,90:45,92:44},{14:$Vm,16:$Vn,26:$Vo,43:$Vp,64:53,65:57,66:58,72:$Vq,73:$Vr,74:$Vs,75:$Vt,76:51,77:50,78:52,79:$Vu,81:49,82:48,85:47,87:46,90:45,92:132},{14:$Vm,16:$Vn,26:$Vo,43:$Vp,64:53,65:57,66:58,72:$Vq,73:$Vr,74:$Vs,75:$Vt,76:51,77:50,78:52,79:$Vu,81:49,82:48,85:47,87:46,90:133},{14:$Vm,16:$Vn,26:$Vo,43:$Vp,64:53,65:57,66:58,72:$Vq,73:$Vr,74:$Vs,75:$Vt,76:51,77:50,78:52,79:$Vu,81:49,82:48,85:47,87:134},{14:$Vm,16:$Vn,26:$Vo,43:$Vp,64:53,65:57,66:58,72:$Vq,73:$Vr,74:$Vs,75:$Vt,76:51,77:50,78:52,79:$Vu,81:49,82:48,85:135},{14:$Vm,16:$Vn,26:$Vo,43:$Vp,64:53,65:57,66:58,72:$Vq,73:$Vr,74:$Vs,75:$Vt,76:51,77:50,78:52,79:$Vu,81:49,82:48,85:136},{14:$Vm,16:$Vn,26:$Vo,43:$Vp,64:53,65:57,66:58,72:$Vq,73:$Vr,74:$Vs,75:$Vt,76:51,77:50,78:52,79:$Vu,81:49,82:48,85:137},{14:$Vm,16:$Vn,26:$Vo,43:$Vp,64:53,65:57,66:58,72:$Vq,73:$Vr,74:$Vs,75:$Vt,76:51,77:50,78:52,79:$Vu,81:49,82:48,85:138},{14:$Vm,16:$Vn,26:$Vo,43:$Vp,64:53,65:57,66:58,72:$Vq,73:$Vr,74:$Vs,75:$Vt,76:51,77:50,78:52,79:$Vu,81:49,82:139},{14:$Vm,16:$Vn,26:$Vo,43:$Vp,64:53,65:57,66:58,72:$Vq,73:$Vr,74:$Vs,75:$Vt,76:51,77:50,78:52,79:$Vu,81:49,82:140},{14:$Vm,16:$Vn,26:$Vo,43:$Vp,64:53,65:57,66:58,72:$Vq,73:$Vr,74:$Vs,75:$Vt,76:51,77:50,78:52,79:$Vu,81:141},{14:$Vm,16:$Vn,26:$Vo,43:$Vp,64:53,65:57,66:58,72:$Vq,73:$Vr,74:$Vs,75:$Vt,76:51,77:50,78:52,79:$Vu,81:142},{14:$Vm,16:$Vn,26:$Vo,33:[1,144],43:$Vp,55:145,57:43,64:53,65:57,66:58,72:$Vq,73:$Vr,74:$Vs,75:$Vt,76:51,77:50,78:52,79:$Vu,80:143,81:49,82:48,85:47,87:46,90:45,92:44},{16:[1,146]},o($VS,[2,87]),o($VS,$VT,{50:$VU}),{44:[1,147],69:[1,148]},{19:[1,149]},o($V$,[2,72]),{27:[1,150]},o($Vv,[2,59],{49:$Vw,50:$Vx}),o($Vy,[2,50]),o($Vy,[2,51]),{24:[1,151],36:[1,152]},o($VZ,[2,55]),o($VZ,[2,57]),{16:$Vd,28:153,31:$Ve,37:27,40:$Vf,41:26,43:$Vg,46:$Vh,48:$Vi},o($Vy,[2,46]),o($Vy,[2,44]),{16:$Vd,28:75,31:$Ve,37:27,40:$Vf,41:26,43:$Vg,46:$Vh,48:$Vi,52:154},o($Vy,[2,45]),o($Vy,[2,47]),o($Vz,[2,30]),o($Vz,[2,32],{49:$Vw,50:$Vx}),{5:[1,155]},{17:[1,156]},{39:157,40:$VA},o($VZ,[2,36]),{14:$Vm,16:$V01,26:$Vo,43:$Vp,55:161,56:158,57:43,61:$V11,64:53,65:57,66:58,72:$Vq,73:$Vr,74:$Vs,75:$Vt,76:51,77:50,78:52,79:$Vu,81:49,82:48,85:47,87:46,90:45,92:44,97:159,99:$V21},o($VB,[2,63],{69:[1,164]}),{19:[1,165]},o($V31,[2,113]),{17:[1,166]},{62:[1,167],94:$VC},o($VD,[2,111],{93:$VE}),o($VF,[2,109],{91:$VG}),o($VH,[2,107],{22:$VI,24:$VJ,88:$VK,89:$VL}),o($VM,[2,102],{79:$VN,86:$VO}),o($VM,[2,103],{79:$VN,86:$VO}),o($VM,[2,104],{79:$VN,86:$VO}),o($VM,[2,105],{79:$VN,86:$VO}),o($VP,[2,99],{83:$VQ,84:$VR}),o($VP,[2,100],{83:$VQ,84:$VR}),o($VS,[2,96]),o($VS,[2,97]),{33:[1,168],36:[1,169]},o($VS,[2,94]),o($Vz,[2,90]),o($VV,[2,85]),o($VV,[2,77]),{16:$VY,67:170},{5:[1,171]},{14:$Vm,16:$Vn,26:$Vo,43:$Vp,57:173,63:172,64:53,65:57,66:58,72:$Vq,73:$Vr,74:$Vs,75:$Vt,76:51,77:50,78:52,79:$Vu,81:49,82:48,85:47,87:46,90:45,92:44},o($Vy,[2,41]),{16:$Vd,28:113,31:$Ve,37:27,40:$Vf,41:26,43:$Vg,46:$Vh,48:$Vi,53:174},{44:[1,175]},o($Vz,[2,53]),{9:179,16:$V3,20:176,25:177,30:$V41},{5:[1,180]},o($VZ,[2,38]),{5:[1,181]},{5:[2,124]},o([5,22,24,31,50,58,61,79,83,84,86,88,89,91,93,94,98],$VX,{17:[1,182],27:[1,183]}),{5:[2,120],98:[1,184]},{14:$Vm,16:$Vn,26:$Vo,43:$Vp,55:185,57:43,64:53,65:57,66:58,72:$Vq,73:$Vr,74:$Vs,75:$Vt,76:51,77:50,78:52,79:$Vu,81:49,82:48,85:47,87:46,90:45,92:44},{16:[1,186]},{16:$V_,95:187},{5:[1,188]},{14:$Vm,16:$Vn,26:$Vo,43:$Vp,57:173,63:189,64:53,65:57,66:58,72:$Vq,73:$Vr,74:$Vs,75:$Vt,76:51,77:50,78:52,79:$Vu,81:49,82:48,85:47,87:46,90:45,92:44},{14:$Vm,16:$Vn,26:$Vo,43:$Vp,57:190,64:53,65:57,66:58,72:$Vq,73:$Vr,74:$Vs,75:$Vt,76:51,77:50,78:52,79:$Vu,81:49,82:48,85:47,87:46,90:45,92:44},o($VS,[2,93]),{14:$Vm,16:$Vn,26:$Vo,43:$Vp,55:191,57:43,64:53,65:57,66:58,72:$Vq,73:$Vr,74:$Vs,75:$Vt,76:51,77:50,78:52,79:$Vu,81:49,82:48,85:47,87:46,90:45,92:44},o($V$,[2,73]),{16:$V51,70:193,71:192},o($V$,[2,71]),o($V61,[2,66],{61:[1,195],94:$VC}),o($VZ,[2,56]),o($Vy,[2,43]),{5:[1,196]},{5:[2,13]},{16:[1,197]},o($V71,$V6,{10:198,12:199,16:$V7,27:$V8,31:$V9}),{19:[1,200]},{14:$Vm,16:$V01,21:[1,201],26:$Vo,43:$Vp,55:161,57:43,61:$V11,64:53,65:57,66:58,72:$Vq,73:$Vr,74:$Vs,75:$Vt,76:51,77:50,78:52,79:$Vu,81:49,82:48,85:47,87:46,90:45,92:44,97:202,99:$V21},{5:$Vl,14:$Vm,16:$Vn,26:$Vo,29:203,43:$Vp,55:41,57:43,64:53,65:57,66:58,72:$Vq,73:$Vr,74:$Vs,75:$Vt,76:51,77:50,78:52,79:$Vu,81:49,82:48,85:47,87:46,90:45,92:44},{16:$Vd,28:204,31:$Ve,37:27,40:$Vf,41:26,43:$Vg,46:$Vh,48:$Vi},{5:$Vl,14:$Vm,16:$Vn,26:$Vo,29:205,43:$Vp,55:41,57:43,64:53,65:57,66:58,72:$Vq,73:$Vr,74:$Vs,75:$Vt,76:51,77:50,78:52,79:$Vu,81:49,82:48,85:47,87:46,90:45,92:44},{5:[1,206]},{17:[1,207]},o($V31,[2,114]),{16:$V81,60:208,96:209},o($V31,[2,112]),o($VB,[2,65],{94:$VC}),o($Vz,[2,91]),{5:[1,211]},{5:[2,75]},{27:[1,212]},{14:$Vm,16:$Vn,26:$Vo,43:$Vp,57:213,64:53,65:57,66:58,72:$Vq,73:$Vr,74:$Vs,75:$Vt,76:51,77:50,78:52,79:$Vu,81:49,82:48,85:47,87:46,90:45,92:44},{9:179,16:$V3,21:[1,214],25:215,30:$V41},{5:[2,21],31:[1,216]},{5:$Vb,11:217,17:$Vc},o($V71,$V6,{10:218,27:$V8}),{5:[1,219]},o($V4,[2,61]),{5:[2,125]},{5:[2,118]},{17:[1,220]},{5:[2,121]},{19:[1,221]},{14:$Vm,16:$Vn,26:$Vo,43:$Vp,55:222,57:43,64:53,65:57,66:58,72:$Vq,73:$Vr,74:$Vs,75:$Vt,76:51,77:50,78:52,79:$Vu,81:49,82:48,85:47,87:46,90:45,92:44},{5:[1,223]},{5:[2,116]},{17:[1,224]},{16:$V51,21:[1,225],70:226},{14:$Vm,16:$Vn,26:$Vo,43:$Vp,55:227,57:43,64:53,65:57,66:58,72:$Vq,73:$Vr,74:$Vs,75:$Vt,76:51,77:50,78:52,79:$Vu,81:49,82:48,85:47,87:46,90:45,92:44},{62:[1,228],94:$VC},o($V4,[2,9]),{5:[2,14]},{16:$V91,32:229,33:[1,230],38:231},{5:[2,24]},{5:$Vb,11:233,17:$Vc},{9:179,16:$V3,20:234,25:177,30:$V41},{5:$Vl,14:$Vm,16:$Vn,26:$Vo,29:235,43:$Vp,55:41,57:43,64:53,65:57,66:58,72:$Vq,73:$Vr,74:$Vs,75:$Vt,76:51,77:50,78:52,79:$Vu,81:49,82:48,85:47,87:46,90:45,92:44},{5:[1,236]},{100:[1,237]},{16:$V81,21:[1,238],96:239},{5:$Vl,14:$Vm,16:$Vn,26:$Vo,29:240,43:$Vp,55:41,57:43,64:53,65:57,66:58,72:$Vq,73:$Vr,74:$Vs,75:$Vt,76:51,77:50,78:52,79:$Vu,81:49,82:48,85:47,87:46,90:45,92:44},{5:[1,241]},{5:[2,76]},{5:[2,74]},{14:$Vm,16:$Vn,26:$Vo,43:$Vp,57:242,64:53,65:57,66:58,72:$Vq,73:$Vr,74:$Vs,75:$Vt,76:51,77:50,78:52,79:$Vu,81:49,82:48,85:47,87:46,90:45,92:44},{33:[1,243],36:[1,244]},{5:[2,23]},o($Vz,[2,33]),{27:[1,245]},{5:[2,25]},{5:[1,246]},{5:[2,119]},{14:$Vm,16:$V01,26:$Vo,43:$Vp,55:161,56:247,57:43,61:$V11,64:53,65:57,66:58,72:$Vq,73:$Vr,74:$Vs,75:$Vt,76:51,77:50,78:52,79:$Vu,81:49,82:48,85:47,87:46,90:45,92:44,97:159,99:$V21},{14:$Vm,16:$Vn,26:$Vo,43:$Vp,55:248,57:43,64:53,65:57,66:58,72:$Vq,73:$Vr,74:$Vs,75:$Vt,76:51,77:50,78:52,79:$Vu,81:49,82:48,85:47,87:46,90:45,92:44},o($VB,[2,64]),{5:[2,117]},{5:[2,115]},{44:[1,249]},o($V61,[2,67],{94:$VC}),{5:[2,22]},{16:$V91,38:250},{16:$Vd,31:$Ve,37:251,40:$Vf,43:$Vg,46:$Vh,48:$Vi},{9:179,16:$V3,21:[1,252],25:215,30:$V41},{5:[1,253]},{5:[1,254]},o($VV,[2,78]),o($Vz,[2,34]),o($Vz,[2,35],{49:$Vw,50:$Vx}),o($V4,[2,10]),{14:$Vm,16:$V01,21:[1,255],26:$Vo,43:$Vp,55:161,57:43,61:$V11,64:53,65:57,66:58,72:$Vq,73:$Vr,74:$Vs,75:$Vt,76:51,77:50,78:52,79:$Vu,81:49,82:48,85:47,87:46,90:45,92:44,97:202,99:$V21},{19:[1,256]},{5:[2,122]},{5:[1,257]},{14:$Vm,16:$V01,26:$Vo,43:$Vp,55:161,56:258,57:43,61:$V11,64:53,65:57,66:58,72:$Vq,73:$Vr,74:$Vs,75:$Vt,76:51,77:50,78:52,79:$Vu,81:49,82:48,85:47,87:46,90:45,92:44,97:159,99:$V21},{5:[1,259]},{14:$Vm,16:$V01,21:[1,260],26:$Vo,43:$Vp,55:161,57:43,61:$V11,64:53,65:57,66:58,72:$Vq,73:$Vr,74:$Vs,75:$Vt,76:51,77:50,78:52,79:$Vu,81:49,82:48,85:47,87:46,90:45,92:44,97:202,99:$V21},{5:[2,123]}],
defaultActions: {3:[2,3],11:[2,2],20:[2,1],159:[2,124],177:[2,13],193:[2,75],202:[2,125],203:[2,118],205:[2,121],209:[2,116],215:[2,14],217:[2,24],226:[2,76],227:[2,74],230:[2,23],233:[2,25],235:[2,119],239:[2,117],240:[2,115],243:[2,22],255:[2,122],260:[2,123]},
parseError: function parseError(str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        throw new Error(str);
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    _token_stack:
        function lex() {
            var token;
            token = lexer.lex() || EOF;
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
            return token;
        }
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};

var ast = require("../marla/ast");
//console.log("LEX " + parser.terminals_[r]);
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function (match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex() {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin(condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState() {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules() {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState(n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState(condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:/* skip line comment */
break;
case 1:/* skip line whitespace */
break;
case 2:return 5
break;
case 3:return 19
break;
case 4:return 21
break;
case 5:return 18
break;
case 6:return 100
break;
case 7:return 74
break;
case 8:return 75
break;
case 9:return 15
break;
case 10:return 99
break;
case 11:return 61
break;
case 12:return 62
break;
case 13:return 58
break;
case 14:return 13
break;
case 15:return 54
break;
case 16:return 73
break;
case 17:return 72
break;
case 18:return 14
break;
case 19:return 16
break;
case 20:return 91
break;
case 21:return 89
break;
case 22:return 88
break;
case 23:return 98
break;
case 24:return 26
break;
case 25:return 50
break;
case 26:return 83
break;
case 27:return 84
break;
case 28:return 79
break;
case 29:return 86
break;
case 30:return '^'
break;
case 31:return 17
break;
case 32:return 31
break;
case 33:return 33
break;
case 34:return 22
break;
case 35:return 24
break;
case 36:return 43
break;
case 37:return 44
break;
case 38:return 46
break;
case 39:return 47
break;
case 40:return '\\'
break;
case 41:return 27
break;
case 42:return 69
break;
case 43:return 30
break;
case 44:return 36
break;
case 45:return 49
break;
case 46:return 40
break;
case 47:return 6
break;
case 48:return 'INVALID'
break;
}
},
rules: [/^(?:(\/\/.*?)((\r?\n)))/,/^(?:[\t ])/,/^(?:(\r?\n))/,/^(?:»)/,/^(?:«)/,/^(?:\.\.\.)/,/^(?:\.\.<)/,/^(?:true\b)/,/^(?:false\b)/,/^(?:type\b)/,/^(?:for\b)/,/^(?:if\b)/,/^(?:else\b)/,/^(?:where\b)/,/^(?:import\b)/,/^(?:->)/,/^(?:[0-9]+\b)/,/^(?:[0-9]+(\.[0-9]+)\b)/,/^(?:"(\\.|[^"])*")/,/^(?:[a-zA-Z_]\w*)/,/^(?:==)/,/^(?:>=)/,/^(?:<=)/,/^(?:<-)/,/^(?:!)/,/^(?:\.)/,/^(?:\*)/,/^(?:\/)/,/^(?:-)/,/^(?:\+)/,/^(?:\^)/,/^(?:=)/,/^(?:\()/,/^(?:\))/,/^(?:<)/,/^(?:>)/,/^(?:\{)/,/^(?:\})/,/^(?:\[)/,/^(?:\])/,/^(?:\\)/,/^(?::)/,/^(?:;)/,/^(?:\|)/,/^(?:,)/,/^(?:\?)/,/^(?:')/,/^(?:$)/,/^(?:.)/],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = parser;
exports.Parser = parser.Parser;
exports.parse = function () { return parser.parse.apply(parser, arguments); };
exports.main = function commonjsMain(args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}