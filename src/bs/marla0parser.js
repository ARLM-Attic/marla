/* parser generated by jison 0.4.15 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var parser = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,8],$V1=[1,7],$V2=[5,6],$V3=[1,15],$V4=[1,16],$V5=[1,23],$V6=[1,37],$V7=[1,36],$V8=[1,44],$V9=[1,40],$Va=[1,41],$Vb=[1,42],$Vc=[1,43],$Vd=[1,35],$Ve=[1,48],$Vf=[1,51],$Vg=[1,49],$Vh=[1,50],$Vi=[1,52],$Vj=[1,53],$Vk=[5,11,13],$Vl=[1,59],$Vm=[1,64],$Vn=[5,6,32,35,97,99,101],$Vo=[1,68],$Vp=[5,6,32,35,43,57,60,61,68,93,97,99,101],$Vq=[1,69],$Vr=[5,6,32,35,43,57,60,61,68,92,93,97,99,101],$Vs=[1,70],$Vt=[5,6,32,35,43,57,60,61,68,90,92,93,97,99,101],$Vu=[1,71],$Vv=[1,73],$Vw=[1,72],$Vx=[1,74],$Vy=[5,6,21,23,32,35,43,57,60,61,68,87,88,90,92,93,97,99,101],$Vz=[1,76],$VA=[1,75],$VB=[5,6,21,23,32,35,43,57,60,61,68,78,85,87,88,90,92,93,97,99,101],$VC=[1,77],$VD=[1,78],$VE=[5,6,21,23,32,35,43,57,60,61,68,78,82,83,85,87,88,90,92,93,97,99,101],$VF=[2,87],$VG=[1,80],$VH=[5,6,21,23,30,32,35,43,49,57,60,61,68,78,82,83,85,87,88,90,92,93,97,99,101],$VI=[10,26,42,71,72,73,74,78],$VJ=[2,70],$VK=[1,86],$VL=[5,11,13,23,32,35,43,46,47],$VM=[1,89],$VN=[1,90],$VO=[5,11,13,23,32,35,43,46,47,48,49,53],$VP=[32,35],$VQ=[23,35],$VR=[1,113],$VS=[43,68],$VT=[1,159],$VU=[1,157],$VV=[1,158],$VW=[5,6,32,35,68,97,99,101],$VX=[1,179],$VY=[1,177],$VZ=[1,194],$V_=[5,6,32,35,43,68,97,99,101],$V$=[5,11],$V01=[2,20],$V11=[1,202],$V21=[5,10,11,13,30],$V31=[1,214],$V41=[2,22],$V51=[1,222],$V61=[1,238];
var parser = {trace: function trace() { },
yy: {},
symbols_: {"error":2,"module":3,"module_item_list":4,"LF":5,"EOF":6,"module_item":7,"type_decl":8,"module_binding":9,"IDENTIFIER":10,"=":11,"expr_or_block":12,":":13,"typeref":14,"params":15,"TYPE":16,"NOTIMPL":17,"INDENT":18,"type_members":19,"OUTDENT":20,"<":21,"type_params":22,">":23,"type_member":24,"member_head":25,"!":26,"member_type":27,"member_body":28,"|":29,"(":30,"type_case_data_list":31,")":32,"param_list":33,"param":34,",":35,"primary_typeref":36,"type_case_data":37,"type_param":38,"SQ":39,"fun_typeref":40,"type_args":41,"{":42,"}":43,"tuple_type_args":44,"[":45,"]":46,"\\":47,"?":48,".":49,"member_ref":50,"tuple_type_arg":51,"type_arg":52,"ARROW":53,"expr":54,"stmt_list":55,"or_expr":56,"WHERE":57,"rec_binding_inline_list":58,"rec_binding_block_list":59,"IF":60,"ELSE":61,"expr_ww":62,"primary_expr":63,"literal":64,"map_ctor_expr":65,"map_ctor_element_inline":66,"map_ctor_element_inline_list":67,";":68,"map_ctor_element_block":69,"map_ctor_element_block_list":70,"FLOAT":71,"INT":72,"BOOL":73,"STRING":74,"postfix_expr":75,"unary_expr":76,"unary_op":77,"-":78,"application_arg_list":79,"application_expr":80,"mul_expr":81,"*":82,"/":83,"add_expr":84,"+":85,"rel_expr":86,"LE_OP":87,"GE_OP":88,"eq_expr":89,"EQ_OP":90,"and_expr":91,"LOGICAL_AND_OP":92,"LOGICAL_OR_OP":93,"rec_binding_inline":94,"rec_binding_block":95,"stmt":96,"ASSIGN_OP":97,"let_expr":98,"THEN":99,"FOR":100,"RANGE":101,"$accept":0,"$end":1},
terminals_: {2:"error",5:"LF",6:"EOF",10:"IDENTIFIER",11:"=",13:":",16:"TYPE",17:"NOTIMPL",18:"INDENT",20:"OUTDENT",21:"<",23:">",26:"!",29:"|",30:"(",32:")",35:",",39:"SQ",42:"{",43:"}",45:"[",46:"]",47:"\\",48:"?",49:".",53:"ARROW",57:"WHERE",60:"IF",61:"ELSE",68:";",71:"FLOAT",72:"INT",73:"BOOL",74:"STRING",78:"-",82:"*",83:"/",85:"+",87:"LE_OP",88:"GE_OP",90:"EQ_OP",92:"LOGICAL_AND_OP",93:"LOGICAL_OR_OP",97:"ASSIGN_OP",99:"THEN",100:"FOR",101:"RANGE"},
productions_: [0,[3,3],[3,2],[3,1],[7,1],[7,1],[4,1],[4,3],[9,3],[9,5],[9,4],[9,6],[8,4],[8,9],[8,12],[19,1],[19,3],[25,1],[25,2],[27,2],[27,0],[28,2],[28,0],[24,2],[24,5],[24,4],[24,3],[24,4],[15,1],[15,3],[15,2],[33,1],[33,3],[34,1],[34,3],[31,1],[31,3],[37,3],[38,2],[22,1],[22,3],[14,1],[36,1],[36,4],[36,2],[36,5],[36,3],[36,3],[36,3],[36,3],[36,2],[36,2],[36,3],[50,1],[44,1],[44,3],[51,1],[41,1],[41,3],[52,1],[40,1],[40,3],[12,1],[12,6],[54,1],[54,3],[54,8],[54,5],[62,1],[62,5],[63,1],[63,1],[63,1],[66,3],[67,1],[67,3],[69,3],[70,1],[70,3],[65,3],[65,9],[64,1],[64,1],[64,1],[64,1],[75,1],[75,3],[76,1],[76,2],[77,1],[77,1],[79,1],[79,3],[80,1],[80,4],[80,3],[81,1],[81,3],[81,3],[84,1],[84,3],[84,3],[86,1],[86,3],[86,3],[86,3],[86,3],[89,1],[89,3],[91,1],[91,3],[56,1],[56,3],[94,3],[58,1],[58,3],[95,3],[59,1],[59,3],[96,1],[96,3],[96,1],[96,9],[96,12],[55,1],[55,3],[98,3],[98,5]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
return $$[$0-2];
break;
case 2:
return $$[$0-1];
break;
case 3:
return [];
break;
case 4: case 5: case 17: case 19: case 21: case 56: case 59: case 60: case 62: case 64: case 68: case 71: case 72: case 85: case 87: case 93: case 96:
this.$=$$[$0];
break;
case 6: case 15: case 31: case 35: case 39: case 54: case 57:
this.$=[$$[$0]];
break;
case 7: case 32:
$$[$0-2].push($$[$0-1]);this.$=$$[$0-2];
break;
case 12:
this.$=new ast.TypeDecl($$[$0-2],[],[]);
break;
case 13:
this.$=new ast.TypeDecl($$[$0-7],[],$$[$0-2]);
break;
case 14:
this.$=new ast.TypeDecl($$[$0-10],$$[$0-8],$$[$0-2]);
break;
case 16: case 36: case 40: case 55: case 58:
$$[$0-2].push($$[$0]);this.$=$$[$0-2];
break;
case 18:
this.$=$$[$0-1];
break;
case 20: case 22:
this.$=null;
break;
case 23:
this.$=new ast.CaseTypeDeclMember($$[$0], []);
break;
case 24:
this.$=new ast.CaseTypeDeclMember($$[$0-3], $$[$0-1]);
break;
case 25:
this.$=new ast.CaseTypeDeclMember($$[$0-2], []);
break;
case 26:
this.$=new ast.DataTypeDeclMember($$[$0-2],$$[$0-1],$$[$0]);
break;
case 27:
this.$=new ast.MethodTypeDeclMember($$[$0-3],$$[$0-2],$$[$0-1],$$[$0]);
break;
case 37:
this.$=new ast.DataTypeDeclMember($$[$0-2],$$[$0],null);
break;
case 38:
this.$="'"+$$[$0];
break;
case 42:
this.$=new ast.NamedTyperef($$[$0],[]);
break;
case 43:
this.$=new ast.NamedTyperef($$[$0-3],$$[$0-1]);
break;
case 44:
this.$=new ast.NamedTyperef("'"+$$[$0],[]);
break;
case 45:
this.$=new ast.NamedTyperef("Map", [$$[$0-3],$$[$0-1]]);
break;
case 46:
this.$=new ast.NamedTyperef("Tuple", $$[$0-1]);
break;
case 47:
this.$=new ast.NamedTyperef("Array", [$$[$0-1]]);
break;
case 48:
this.$=new ast.NamedTyperef("Set", [$$[$0-1]]);
break;
case 49:
this.$=new ast.NamedTyperef("Seq", [$$[$0-1]]);
break;
case 50:
this.$=new ast.UnitTyperef();
break;
case 51:
this.$=new ast.NamedTyperef("Option", [$$[$0-1]]);
break;
case 52:
this.$=new ast.MemberTyperef($$[$0-2], [$$[$0]]);
break;
case 61:
this.$=new ast.NamedTyperef("Fun", [$$[$0-2],$$[$0]]);
break;
case 63:
this.$=$$[$0-2];
break;
case 65:
this.$=new ast.WhereExpr($$[$0-2], $$[$0]);
break;
case 66:
this.$=new ast.WhereExpr($$[$0-7], $$[$0-2]);
break;
case 67: case 69:
this.$=new ast.IfExpr($$[$0-4], $$[$0-2], $$[$0]);
break;
case 70:
this.$=new ast.VarExpr($$[$0]);
break;
case 81:
this.$=new ast.FloatLiteral($$[$0]);
break;
case 82:
this.$=new ast.IntLiteral($$[$0]);
break;
case 83:
this.$=new ast.BoolLiteral($$[$0]);
break;
case 84:
this.$=new ast.StringLiteral($$[$0]);
break;
case 94:
this.$=new ast.ApplicationExpr($$[$0-3], $$[$0-1]);
break;
case 95:
this.$=new ast.ApplicationExpr($$[$0-2], []);
break;
case 100:
this.$=new ast.ApplicationExpr(new ast.VarExpr("+"), [$$[$0-2], $$[$0]]);
break;
case 101:
this.$=new ast.ApplicationExpr(new ast.VarExpr("-"), [$$[$0-2], $$[$0]]);
break;
}
},
table: [{3:1,4:2,6:[1,3],7:4,8:5,9:6,10:$V0,16:$V1},{1:[3]},{5:[1,9],6:[1,10]},{1:[2,3]},o($V2,[2,6]),o($V2,[2,4]),o($V2,[2,5]),{10:[1,11]},{10:$V3,11:[1,12],13:[1,13],15:14,30:$V4},{6:[1,17],7:18,8:5,9:6,10:$V0,16:$V1},{1:[2,2]},{11:[1,19],21:[1,20]},{5:$V5,10:$V6,12:21,26:$V7,42:$V8,54:22,56:24,63:34,64:38,65:39,71:$V9,72:$Va,73:$Vb,74:$Vc,75:32,76:31,77:33,78:$Vd,80:30,81:29,84:28,86:27,89:26,91:25},{10:$Ve,14:45,30:$Vf,36:47,39:$Vg,40:46,42:$Vh,45:$Vi,47:$Vj},{11:[1,54],13:[1,55]},o($Vk,[2,28]),{10:$Vl,32:[1,57],33:56,34:58},{1:[2,1]},o($V2,[2,7]),{5:[1,61],17:[1,60]},{22:62,38:63,39:$Vm},o($V2,[2,8]),o($V2,[2,62]),{18:[1,65]},o($Vn,[2,64],{57:[1,66],60:[1,67],93:$Vo}),o($Vp,[2,111],{92:$Vq}),o($Vr,[2,109],{90:$Vs}),o($Vt,[2,107],{21:$Vu,23:$Vv,87:$Vw,88:$Vx}),o($Vy,[2,102],{78:$Vz,85:$VA}),o($VB,[2,99],{82:$VC,83:$VD}),o($VE,[2,96]),o($VE,[2,93]),o($VE,$VF,{30:[1,79],49:$VG}),{10:$V6,26:$V7,42:$V8,63:34,64:38,65:39,71:$V9,72:$Va,73:$Vb,74:$Vc,75:82,76:81,77:33,78:$Vd},o($VH,[2,85]),o($VI,[2,89]),o($VI,[2,90]),o($VH,$VJ),o($VH,[2,71]),o($VH,[2,72]),o($VH,[2,81]),o($VH,[2,82]),o($VH,[2,83]),o($VH,[2,84]),{5:[1,84],10:$VK,66:85,67:83},{11:[1,87]},o($VL,[2,41]),o($VL,[2,60],{48:$VM,49:$VN,53:[1,88]}),o($VO,[2,42],{21:[1,91]}),{10:[1,92]},{10:$Ve,14:93,30:$Vf,36:47,39:$Vg,40:46,42:$Vh,45:$Vi,47:$Vj},{10:$Ve,14:97,30:$Vf,32:[1,95],36:47,39:$Vg,40:46,42:$Vh,44:94,45:$Vi,47:$Vj,51:96},{10:$Ve,14:98,30:$Vf,36:47,39:$Vg,40:46,42:$Vh,45:$Vi,47:$Vj},{10:$Ve,14:99,30:$Vf,36:47,39:$Vg,40:46,42:$Vh,45:$Vi,47:$Vj},{5:$V5,10:$V6,12:100,26:$V7,42:$V8,54:22,56:24,63:34,64:38,65:39,71:$V9,72:$Va,73:$Vb,74:$Vc,75:32,76:31,77:33,78:$Vd,80:30,81:29,84:28,86:27,89:26,91:25},{10:$Ve,14:101,30:$Vf,36:47,39:$Vg,40:46,42:$Vh,45:$Vi,47:$Vj},{32:[1,102],35:[1,103]},o($Vk,[2,30]),o($VP,[2,31]),o($VP,[2,33],{13:[1,104]}),o($V2,[2,12]),{18:[1,105]},{23:[1,106],35:[1,107]},o($VQ,[2,39]),{10:[1,108]},{5:[1,109]},{5:[1,111],10:$VR,58:110,94:112},{10:$V6,26:$V7,42:$V8,56:114,63:34,64:38,65:39,71:$V9,72:$Va,73:$Vb,74:$Vc,75:32,76:31,77:33,78:$Vd,80:30,81:29,84:28,86:27,89:26,91:25},{10:$V6,26:$V7,42:$V8,63:34,64:38,65:39,71:$V9,72:$Va,73:$Vb,74:$Vc,75:32,76:31,77:33,78:$Vd,80:30,81:29,84:28,86:27,89:26,91:115},{10:$V6,26:$V7,42:$V8,63:34,64:38,65:39,71:$V9,72:$Va,73:$Vb,74:$Vc,75:32,76:31,77:33,78:$Vd,80:30,81:29,84:28,86:27,89:116},{10:$V6,26:$V7,42:$V8,63:34,64:38,65:39,71:$V9,72:$Va,73:$Vb,74:$Vc,75:32,76:31,77:33,78:$Vd,80:30,81:29,84:28,86:117},{10:$V6,26:$V7,42:$V8,63:34,64:38,65:39,71:$V9,72:$Va,73:$Vb,74:$Vc,75:32,76:31,77:33,78:$Vd,80:30,81:29,84:118},{10:$V6,26:$V7,42:$V8,63:34,64:38,65:39,71:$V9,72:$Va,73:$Vb,74:$Vc,75:32,76:31,77:33,78:$Vd,80:30,81:29,84:119},{10:$V6,26:$V7,42:$V8,63:34,64:38,65:39,71:$V9,72:$Va,73:$Vb,74:$Vc,75:32,76:31,77:33,78:$Vd,80:30,81:29,84:120},{10:$V6,26:$V7,42:$V8,63:34,64:38,65:39,71:$V9,72:$Va,73:$Vb,74:$Vc,75:32,76:31,77:33,78:$Vd,80:30,81:29,84:121},{10:$V6,26:$V7,42:$V8,63:34,64:38,65:39,71:$V9,72:$Va,73:$Vb,74:$Vc,75:32,76:31,77:33,78:$Vd,80:30,81:122},{10:$V6,26:$V7,42:$V8,63:34,64:38,65:39,71:$V9,72:$Va,73:$Vb,74:$Vc,75:32,76:31,77:33,78:$Vd,80:30,81:123},{10:$V6,26:$V7,42:$V8,63:34,64:38,65:39,71:$V9,72:$Va,73:$Vb,74:$Vc,75:32,76:31,77:33,78:$Vd,80:124},{10:$V6,26:$V7,42:$V8,63:34,64:38,65:39,71:$V9,72:$Va,73:$Vb,74:$Vc,75:32,76:31,77:33,78:$Vd,80:125},{10:$V6,26:$V7,32:[1,127],42:$V8,54:128,56:24,63:34,64:38,65:39,71:$V9,72:$Va,73:$Vb,74:$Vc,75:32,76:31,77:33,78:$Vd,79:126,80:30,81:29,84:28,86:27,89:26,91:25},{10:[1,129]},o($VE,[2,88]),o($VE,$VF,{49:$VG}),{43:[1,130],68:[1,131]},{18:[1,132]},o($VS,[2,74]),{13:[1,133]},{5:$V5,10:$V6,12:134,26:$V7,42:$V8,54:22,56:24,63:34,64:38,65:39,71:$V9,72:$Va,73:$Vb,74:$Vc,75:32,76:31,77:33,78:$Vd,80:30,81:29,84:28,86:27,89:26,91:25},{10:$Ve,30:$Vf,36:135,39:$Vg,42:$Vh,45:$Vi,47:$Vj},o($VO,[2,51]),{10:[1,137],50:136},{10:$Ve,14:140,30:$Vf,36:47,39:$Vg,40:46,41:138,42:$Vh,45:$Vi,47:$Vj,52:139},o($VO,[2,44]),{13:[1,141],43:[1,142]},{32:[1,143],35:[1,144]},o($VO,[2,50]),o($VP,[2,54]),o($VP,[2,56]),{46:[1,145]},{47:[1,146]},o($V2,[2,10]),{11:[1,147]},o($Vk,[2,29]),{10:$Vl,34:148},{10:$Ve,30:$Vf,36:149,39:$Vg,42:$Vh,45:$Vi,47:$Vj},{5:[1,150]},{11:[1,151]},{38:152,39:$Vm},o($VQ,[2,38]),{10:$VT,26:$V7,42:$V8,54:155,55:153,56:24,60:$VU,63:34,64:38,65:39,71:$V9,72:$Va,73:$Vb,74:$Vc,75:32,76:31,77:33,78:$Vd,80:30,81:29,84:28,86:27,89:26,91:25,96:154,98:156,100:$VV},o($Vn,[2,65],{68:[1,160]}),{18:[1,161]},o($VW,[2,114]),{11:[1,162]},{61:[1,163],93:$Vo},o($Vp,[2,112],{92:$Vq}),o($Vr,[2,110],{90:$Vs}),o($Vt,[2,108],{21:$Vu,23:$Vv,87:$Vw,88:$Vx}),o($Vy,[2,103],{78:$Vz,85:$VA}),o($Vy,[2,104],{78:$Vz,85:$VA}),o($Vy,[2,105],{78:$Vz,85:$VA}),o($Vy,[2,106],{78:$Vz,85:$VA}),o($VB,[2,100],{82:$VC,83:$VD}),o($VB,[2,101],{82:$VC,83:$VD}),o($VE,[2,97]),o($VE,[2,98]),{32:[1,164],35:[1,165]},o($VE,[2,95]),o($VP,[2,91]),o($VH,[2,86]),o($VH,[2,79]),{10:$VK,66:166},{5:[1,167]},{10:$V6,26:$V7,42:$V8,56:169,62:168,63:34,64:38,65:39,71:$V9,72:$Va,73:$Vb,74:$Vc,75:32,76:31,77:33,78:$Vd,80:30,81:29,84:28,86:27,89:26,91:25},o($V2,[2,9]),o($VL,[2,61],{48:$VM,49:$VN}),o($VO,[2,52]),o($VO,[2,53]),{23:[1,170],35:[1,171]},o($VQ,[2,57]),o($VQ,[2,59]),{10:$Ve,14:172,30:$Vf,36:47,39:$Vg,40:46,42:$Vh,45:$Vi,47:$Vj},o($VO,[2,48]),o($VO,[2,46]),{10:$Ve,14:97,30:$Vf,36:47,39:$Vg,40:46,42:$Vh,45:$Vi,47:$Vj,51:173},o($VO,[2,47]),o($VO,[2,49]),{5:$V5,10:$V6,12:174,26:$V7,42:$V8,54:22,56:24,63:34,64:38,65:39,71:$V9,72:$Va,73:$Vb,74:$Vc,75:32,76:31,77:33,78:$Vd,80:30,81:29,84:28,86:27,89:26,91:25},o($VP,[2,32]),o($VP,[2,34],{48:$VM,49:$VN}),{10:$VX,19:175,24:176,25:178,29:$VY},{5:[1,180]},o($VQ,[2,40]),{5:[1,181]},{5:[2,124]},{5:[2,119],97:[1,182]},{5:[2,121]},{10:$V6,26:$V7,42:$V8,54:183,56:24,63:34,64:38,65:39,71:$V9,72:$Va,73:$Vb,74:$Vc,75:32,76:31,77:33,78:$Vd,80:30,81:29,84:28,86:27,89:26,91:25},{10:[1,184]},o([5,21,23,30,49,57,60,78,82,83,85,87,88,90,92,93,97],$VJ,{11:[1,185],13:[1,186]}),{10:$VR,94:187},{5:[1,188]},{10:$V6,26:$V7,42:$V8,56:169,62:189,63:34,64:38,65:39,71:$V9,72:$Va,73:$Vb,74:$Vc,75:32,76:31,77:33,78:$Vd,80:30,81:29,84:28,86:27,89:26,91:25},{10:$V6,26:$V7,42:$V8,56:190,63:34,64:38,65:39,71:$V9,72:$Va,73:$Vb,74:$Vc,75:32,76:31,77:33,78:$Vd,80:30,81:29,84:28,86:27,89:26,91:25},o($VE,[2,94]),{10:$V6,26:$V7,42:$V8,54:191,56:24,63:34,64:38,65:39,71:$V9,72:$Va,73:$Vb,74:$Vc,75:32,76:31,77:33,78:$Vd,80:30,81:29,84:28,86:27,89:26,91:25},o($VS,[2,75]),{10:$VZ,69:193,70:192},o($VS,[2,73]),o($V_,[2,68],{60:[1,195],93:$Vo}),o($VO,[2,43]),{10:$Ve,14:140,30:$Vf,36:47,39:$Vg,40:46,42:$Vh,45:$Vi,47:$Vj,52:196},{43:[1,197]},o($VP,[2,55]),o($V2,[2,11]),{5:[1,198]},{5:[2,15]},{10:[1,199]},o($V$,$V01,{27:200,15:201,10:$V3,13:$V11,30:$V4}),o($V21,[2,17],{26:[1,203]}),{18:[1,204]},{10:$VT,20:[1,205],26:$V7,42:$V8,54:155,56:24,60:$VU,63:34,64:38,65:39,71:$V9,72:$Va,73:$Vb,74:$Vc,75:32,76:31,77:33,78:$Vd,80:30,81:29,84:28,86:27,89:26,91:25,96:206,98:156,100:$VV},{5:$V5,10:$V6,12:207,26:$V7,42:$V8,54:22,56:24,63:34,64:38,65:39,71:$V9,72:$Va,73:$Vb,74:$Vc,75:32,76:31,77:33,78:$Vd,80:30,81:29,84:28,86:27,89:26,91:25},{99:[1,208]},{11:[1,209]},{5:$V5,10:$V6,12:210,26:$V7,42:$V8,54:22,56:24,63:34,64:38,65:39,71:$V9,72:$Va,73:$Vb,74:$Vc,75:32,76:31,77:33,78:$Vd,80:30,81:29,84:28,86:27,89:26,91:25},{10:$Ve,14:211,30:$Vf,36:47,39:$Vg,40:46,42:$Vh,45:$Vi,47:$Vj},o($VW,[2,115]),{10:$V31,59:212,95:213},o($VW,[2,113]),o($Vn,[2,67],{93:$Vo}),o($VP,[2,92]),{5:[1,215]},{5:[2,77]},{13:[1,216]},{10:$V6,26:$V7,42:$V8,56:217,63:34,64:38,65:39,71:$V9,72:$Va,73:$Vb,74:$Vc,75:32,76:31,77:33,78:$Vd,80:30,81:29,84:28,86:27,89:26,91:25},o($VQ,[2,58]),o($VO,[2,45]),{10:$VX,20:[1,218],24:219,25:178,29:$VY},{5:[2,23],30:[1,220]},{5:$V41,11:$V51,28:221},o($V$,$V01,{27:223,13:$V11}),{10:$Ve,14:224,30:$Vf,36:47,39:$Vg,40:46,42:$Vh,45:$Vi,47:$Vj},o($V21,[2,18]),{5:[1,225]},o($V2,[2,63]),{5:[2,125]},{5:[2,120]},{5:[1,226]},{10:$V6,26:$V7,42:$V8,54:227,56:24,63:34,64:38,65:39,71:$V9,72:$Va,73:$Vb,74:$Vc,75:32,76:31,77:33,78:$Vd,80:30,81:29,84:28,86:27,89:26,91:25},{5:[2,126]},{11:[1,228]},{5:[1,229]},{5:[2,117]},{11:[1,230]},{10:$VZ,20:[1,231],69:232},{10:$V6,26:$V7,42:$V8,54:233,56:24,63:34,64:38,65:39,71:$V9,72:$Va,73:$Vb,74:$Vc,75:32,76:31,77:33,78:$Vd,80:30,81:29,84:28,86:27,89:26,91:25},{61:[1,234],93:$Vo},o($V2,[2,13]),{5:[2,16]},{10:$V61,31:235,32:[1,236],37:237},{5:[2,26]},{5:$V5,10:$V6,12:239,26:$V7,42:$V8,54:22,56:24,63:34,64:38,65:39,71:$V9,72:$Va,73:$Vb,74:$Vc,75:32,76:31,77:33,78:$Vd,80:30,81:29,84:28,86:27,89:26,91:25},{5:$V41,11:$V51,28:240},o($V$,[2,19]),{10:$VX,19:241,24:176,25:178,29:$VY},{18:[1,242]},{101:[1,243]},{5:$V5,10:$V6,12:244,26:$V7,42:$V8,54:22,56:24,63:34,64:38,65:39,71:$V9,72:$Va,73:$Vb,74:$Vc,75:32,76:31,77:33,78:$Vd,80:30,81:29,84:28,86:27,89:26,91:25},{10:$V31,20:[1,245],95:246},{5:$V5,10:$V6,12:247,26:$V7,42:$V8,54:22,56:24,63:34,64:38,65:39,71:$V9,72:$Va,73:$Vb,74:$Vc,75:32,76:31,77:33,78:$Vd,80:30,81:29,84:28,86:27,89:26,91:25},{5:[1,248]},{5:[2,78]},{5:[2,76]},{10:$V6,26:$V7,42:$V8,56:249,63:34,64:38,65:39,71:$V9,72:$Va,73:$Vb,74:$Vc,75:32,76:31,77:33,78:$Vd,80:30,81:29,84:28,86:27,89:26,91:25},{32:[1,250],35:[1,251]},{5:[2,25]},o($VP,[2,35]),{13:[1,252]},{5:[2,21]},{5:[2,27]},{5:[1,253]},{5:[1,254]},{10:$V6,26:$V7,42:$V8,54:255,56:24,63:34,64:38,65:39,71:$V9,72:$Va,73:$Vb,74:$Vc,75:32,76:31,77:33,78:$Vd,80:30,81:29,84:28,86:27,89:26,91:25},{5:[2,127]},o($Vn,[2,66]),{5:[2,118]},{5:[2,116]},{43:[1,256]},o($V_,[2,69],{93:$Vo}),{5:[2,24]},{10:$V61,37:257},{10:$Ve,30:$Vf,36:258,39:$Vg,42:$Vh,45:$Vi,47:$Vj},{10:$VX,20:[1,259],24:219,25:178,29:$VY},{10:$VT,26:$V7,42:$V8,54:155,55:260,56:24,60:$VU,63:34,64:38,65:39,71:$V9,72:$Va,73:$Vb,74:$Vc,75:32,76:31,77:33,78:$Vd,80:30,81:29,84:28,86:27,89:26,91:25,96:154,98:156,100:$VV},{5:[1,261]},o($VH,[2,80]),o($VP,[2,36]),o($VP,[2,37],{48:$VM,49:$VN}),o($V2,[2,14]),{5:[1,262]},{18:[1,263]},{10:$VT,20:[1,264],26:$V7,42:$V8,54:155,56:24,60:$VU,63:34,64:38,65:39,71:$V9,72:$Va,73:$Vb,74:$Vc,75:32,76:31,77:33,78:$Vd,80:30,81:29,84:28,86:27,89:26,91:25,96:206,98:156,100:$VV},{5:[1,265]},{5:[2,122]},{10:$VT,26:$V7,42:$V8,54:155,55:266,56:24,60:$VU,63:34,64:38,65:39,71:$V9,72:$Va,73:$Vb,74:$Vc,75:32,76:31,77:33,78:$Vd,80:30,81:29,84:28,86:27,89:26,91:25,96:154,98:156,100:$VV},{5:[1,267]},{10:$VT,20:[1,268],26:$V7,42:$V8,54:155,56:24,60:$VU,63:34,64:38,65:39,71:$V9,72:$Va,73:$Vb,74:$Vc,75:32,76:31,77:33,78:$Vd,80:30,81:29,84:28,86:27,89:26,91:25,96:206,98:156,100:$VV},{5:[2,123]}],
defaultActions: {3:[2,3],10:[2,2],17:[2,1],154:[2,124],156:[2,121],176:[2,15],193:[2,77],206:[2,125],207:[2,120],210:[2,126],213:[2,117],219:[2,16],221:[2,26],232:[2,78],233:[2,76],236:[2,25],239:[2,21],240:[2,27],244:[2,127],246:[2,118],247:[2,116],250:[2,24],264:[2,122],268:[2,123]},
parseError: function parseError(str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        throw new Error(str);
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    _token_stack:
        function lex() {
            var token;
            token = lexer.lex() || EOF;
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
            return token;
        }
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};

var ast = require("../marla/ast");
//console.log("LEX " + parser.terminals_[r]);
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function (match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex() {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin(condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState() {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules() {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState(n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState(condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:/* skip line comment */
break;
case 1:/* skip line whitespace */
break;
case 2:return 5
break;
case 3:return 18
break;
case 4:return 20
break;
case 5:return 17
break;
case 6:return 101
break;
case 7:return 16
break;
case 8:return 100
break;
case 9:return 60
break;
case 10:return 99
break;
case 11:return 61
break;
case 12:return 57
break;
case 13:return 53
break;
case 14:return 72
break;
case 15:return 71
break;
case 16:return 74
break;
case 17:return 10
break;
case 18:return 90
break;
case 19:return 88
break;
case 20:return 87
break;
case 21:return 97
break;
case 22:return 26
break;
case 23:return 49
break;
case 24:return 82
break;
case 25:return 83
break;
case 26:return 78
break;
case 27:return 85
break;
case 28:return '^'
break;
case 29:return 11
break;
case 30:return 30
break;
case 31:return 32
break;
case 32:return 21
break;
case 33:return 23
break;
case 34:return 42
break;
case 35:return 43
break;
case 36:return 45
break;
case 37:return 46
break;
case 38:return '\\'
break;
case 39:return 13
break;
case 40:return 68
break;
case 41:return 29
break;
case 42:return 35
break;
case 43:return 48
break;
case 44:return 39
break;
case 45:return 6
break;
case 46:return 'INVALID'
break;
}
},
rules: [/^(?:(\/\/.*?)((\r?\n)))/,/^(?:[\t ])/,/^(?:(\r?\n))/,/^(?:»)/,/^(?:«)/,/^(?:\.\.\.)/,/^(?:\.\.<)/,/^(?:type\b)/,/^(?:for\b)/,/^(?:if\b)/,/^(?:then\b)/,/^(?:else\b)/,/^(?:where\b)/,/^(?:->)/,/^(?:[0-9]+\b)/,/^(?:[0-9]+(\.[0-9]+)\b)/,/^(?:"(\\.|[^"])*")/,/^(?:[a-zA-Z_]\w*)/,/^(?:==)/,/^(?:>=)/,/^(?:<=)/,/^(?:<-)/,/^(?:!)/,/^(?:\.)/,/^(?:\*)/,/^(?:\/)/,/^(?:-)/,/^(?:\+)/,/^(?:\^)/,/^(?:=)/,/^(?:\()/,/^(?:\))/,/^(?:<)/,/^(?:>)/,/^(?:\{)/,/^(?:\})/,/^(?:\[)/,/^(?:\])/,/^(?:\\)/,/^(?::)/,/^(?:;)/,/^(?:\|)/,/^(?:,)/,/^(?:\?)/,/^(?:')/,/^(?:$)/,/^(?:.)/],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = parser;
exports.Parser = parser.Parser;
exports.parse = function () { return parser.parse.apply(parser, arguments); };
exports.main = function commonjsMain(args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}