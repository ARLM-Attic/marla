/* parser generated by jison 0.4.15 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var parser = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,8],$V1=[1,7],$V2=[5,6],$V3=[1,15],$V4=[1,16],$V5=[1,23],$V6=[1,37],$V7=[1,44],$V8=[1,40],$V9=[1,41],$Va=[1,42],$Vb=[1,43],$Vc=[1,35],$Vd=[1,36],$Ve=[1,48],$Vf=[1,51],$Vg=[1,49],$Vh=[1,50],$Vi=[1,52],$Vj=[1,53],$Vk=[11,13],$Vl=[1,59],$Vm=[1,64],$Vn=[5,6,10,39,67,68,69,70,74,75],$Vo=[5,6,10,28,32,39,67,68,69,70,74,75,91],$Vp=[1,68],$Vq=[5,6,10,28,32,39,40,53,56,57,64,67,68,69,70,74,75,87,91],$Vr=[1,69],$Vs=[5,6,10,28,32,39,40,53,56,57,64,67,68,69,70,74,75,86,87,91],$Vt=[1,70],$Vu=[5,6,10,28,32,39,40,53,56,57,64,67,68,69,70,74,75,84,86,87,91],$Vv=[1,71],$Vw=[5,6,10,21,28,32,39,40,53,56,57,64,67,68,69,70,74,75,84,86,87,91],$Vx=[1,72],$Vy=[5,6,10,21,28,32,39,40,53,56,57,64,67,68,69,70,74,75,81,84,86,87,91],$Vz=[1,73],$VA=[5,6,10,21,28,32,39,40,53,56,57,64,67,68,69,70,74,75,79,81,84,86,87,91],$VB=[2,83],$VC=[1,75],$VD=[5,6,10,21,26,28,32,39,40,46,53,56,57,64,67,68,69,70,74,75,79,81,84,86,87,91],$VE=[10,39,67,68,69,70,74,75],$VF=[2,66],$VG=[1,81],$VH=[5,11,13,23,28,32,40,43,44],$VI=[1,84],$VJ=[1,85],$VK=[5,11,13,23,28,32,40,43,44,45,46,50],$VL=[28,32],$VM=[23,32],$VN=[1,108],$VO=[40,64],$VP=[1,146],$VQ=[5,6,10,28,32,39,64,67,68,69,70,74,75,91],$VR=[1,165],$VS=[1,164],$VT=[5,10,39,67,68,69,70,74,75],$VU=[1,179],$VV=[5,6,10,28,32,39,40,64,67,68,69,70,74,75,91],$VW=[1,195],$VX=[1,216];
var parser = {trace: function trace() { },
yy: {},
symbols_: {"error":2,"module":3,"module_item_list":4,"LF":5,"EOF":6,"module_item":7,"type_decl":8,"module_binding":9,"IDENTIFIER":10,"=":11,"expr_or_block":12,":":13,"typeref":14,"params":15,"TYPE":16,"NOTIMPL":17,"INDENT":18,"type_members":19,"OUTDENT":20,"<":21,"type_params":22,">":23,"type_member":24,"|":25,"(":26,"type_case_data_list":27,")":28,"expr":29,"param_list":30,"param":31,",":32,"primary_typeref":33,"type_case_data":34,"type_param":35,"SQ":36,"fun_typeref":37,"type_args":38,"{":39,"}":40,"tuple_type_args":41,"[":42,"]":43,"\\":44,"?":45,".":46,"member_ref":47,"tuple_type_arg":48,"type_arg":49,"ARROW":50,"stmt_list":51,"or_expr":52,"WHERE":53,"rec_binding_inline_list":54,"rec_binding_block_list":55,"IF":56,"ELSE":57,"expr_ww":58,"primary_expr":59,"literal":60,"map_ctor_expr":61,"map_ctor_element_inline":62,"map_ctor_element_inline_list":63,";":64,"map_ctor_element_block":65,"map_ctor_element_block_list":66,"FLOAT":67,"INT":68,"BOOL":69,"STRING":70,"postfix_expr":71,"unary_expr":72,"unary_op":73,"-":74,"!":75,"application_arg_list":76,"application_expr":77,"mul_expr":78,"*":79,"add_expr":80,"+":81,"rel_expr":82,"eq_expr":83,"EQ_OP":84,"and_expr":85,"LOGICAL_AND_OP":86,"LOGICAL_OR_OP":87,"rec_binding_inline":88,"rec_binding_block":89,"stmt":90,"ASSIGN_OP":91,"let_expr":92,"$accept":0,"$end":1},
terminals_: {2:"error",5:"LF",6:"EOF",10:"IDENTIFIER",11:"=",13:":",16:"TYPE",17:"NOTIMPL",18:"INDENT",20:"OUTDENT",21:"<",23:">",25:"|",26:"(",28:")",32:",",36:"SQ",39:"{",40:"}",42:"[",43:"]",44:"\\",45:"?",46:".",50:"ARROW",53:"WHERE",56:"IF",57:"ELSE",64:";",67:"FLOAT",68:"INT",69:"BOOL",70:"STRING",74:"-",75:"!",79:"*",81:"+",84:"EQ_OP",86:"LOGICAL_AND_OP",87:"LOGICAL_OR_OP",91:"ASSIGN_OP"},
productions_: [0,[3,3],[3,2],[3,1],[7,1],[7,1],[4,1],[4,3],[9,3],[9,5],[9,4],[9,6],[8,4],[8,9],[8,12],[19,1],[19,3],[24,2],[24,5],[24,4],[24,3],[24,5],[24,3],[24,4],[15,1],[15,3],[15,2],[30,1],[30,3],[31,1],[31,3],[27,1],[27,3],[34,3],[35,2],[22,1],[22,3],[14,1],[33,1],[33,4],[33,2],[33,5],[33,3],[33,3],[33,3],[33,3],[33,2],[33,2],[33,3],[47,1],[41,1],[41,3],[48,1],[38,1],[38,3],[49,1],[37,1],[37,3],[12,1],[12,6],[29,1],[29,3],[29,8],[29,5],[58,1],[58,5],[59,1],[59,1],[59,1],[62,3],[63,1],[63,3],[65,3],[66,1],[66,3],[61,3],[61,9],[60,1],[60,1],[60,1],[60,1],[71,1],[71,3],[72,1],[72,2],[73,1],[73,1],[76,1],[76,3],[77,1],[77,4],[78,1],[78,3],[80,1],[80,3],[82,1],[82,3],[83,1],[83,3],[85,1],[85,3],[52,1],[52,3],[88,3],[54,1],[54,3],[89,3],[55,1],[55,3],[90,1],[90,3],[90,1],[51,1],[51,2],[92,3],[92,5]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
return $$[$0-2];
break;
case 2:
return $$[$0-1];
break;
case 3:
return [];
break;
case 4: case 5: case 52: case 55: case 56: case 58: case 60: case 64: case 67: case 68: case 81: case 83: case 89: case 91:
this.$=$$[$0];
break;
case 6: case 15: case 27: case 31: case 35: case 50: case 53:
this.$=[$$[$0]];
break;
case 7: case 16: case 32: case 36: case 51: case 54:
$$[$0-2].push($$[$0]);this.$=$$[$0-2];
break;
case 12:
this.$=new ast.TypeDecl($$[$0-2],[],[]);
break;
case 13:
this.$=new ast.TypeDecl($$[$0-7],[],$$[$0-2]);
break;
case 14:
this.$=new ast.TypeDecl($$[$0-10],$$[$0-8],$$[$0-2]);
break;
case 17:
this.$=new ast.CaseTypeDeclMember($$[$0], []);
break;
case 18:
this.$=new ast.CaseTypeDeclMember($$[$0-3], $$[$0-1]);
break;
case 19:
this.$=new ast.CaseTypeDeclMember($$[$0-2], []);
break;
case 20: case 33:
this.$=new ast.DataTypeDeclMember($$[$0-2],$$[$0],null);
break;
case 21:
this.$=new ast.DataTypeDeclMember($$[$0-4],$$[$0-2],$$[$0]);
break;
case 22:
this.$=new ast.DataTypeDeclMember($$[$0-2],null,$$[$0]);
break;
case 23:
this.$=new ast.MethodTypeDeclMember($$[$0-3],$$[$0-2],$$[$0]);
break;
case 28:
$$[$0-2].push($$[$0-1]);this.$=$$[$0-2];
break;
case 34:
this.$="'"+$$[$0];
break;
case 38:
this.$=new ast.NamedTyperef($$[$0],[]);
break;
case 39:
this.$=new ast.NamedTyperef($$[$0-3],$$[$0-1]);
break;
case 40:
this.$=new ast.NamedTyperef("'"+$$[$0],[]);
break;
case 41:
this.$=new ast.NamedTyperef("Map", [$$[$0-3],$$[$0-1]]);
break;
case 42:
this.$=new ast.NamedTyperef("Tuple", $$[$0-1]);
break;
case 43:
this.$=new ast.NamedTyperef("Array", [$$[$0-1]]);
break;
case 44:
this.$=new ast.NamedTyperef("Set", [$$[$0-1]]);
break;
case 45:
this.$=new ast.NamedTyperef("Seq", [$$[$0-1]]);
break;
case 46:
this.$=new ast.UnitTyperef();
break;
case 47:
this.$=new ast.NamedTyperef("Option", [$$[$0-1]]);
break;
case 48:
this.$=new ast.MemberTyperef($$[$0-2], [$$[$0]]);
break;
case 57:
this.$=new ast.NamedTyperef("Fun", [$$[$0-2],$$[$0]]);
break;
case 59:
this.$=$$[$0-2];
break;
case 61:
this.$=new ast.WhereExpr($$[$0-2], $$[$0]);
break;
case 62:
this.$=new ast.WhereExpr($$[$0-7], $$[$0-2]);
break;
case 63: case 65:
this.$=new ast.IfExpr($$[$0-4], $$[$0-2], $$[$0]);
break;
case 66:
this.$=new ast.VarExpr($$[$0]);
break;
case 77:
this.$=new ast.FloatLiteral($$[$0]);
break;
case 78:
this.$=new ast.IntLiteral($$[$0]);
break;
case 79:
this.$=new ast.BoolLiteral($$[$0]);
break;
case 80:
this.$=new ast.StringLiteral($$[$0]);
break;
case 90:
this.$=new ast.ApplicationExpr($$[$0-3], $$[$0-2]);
break;
case 92:
this.$=new ast.ApplicationExpr(new ast.VarExpr("*"), [$$[$0-2], $$[$0]]);
break;
}
},
table: [{3:1,4:2,6:[1,3],7:4,8:5,9:6,10:$V0,16:$V1},{1:[3]},{5:[1,9],6:[1,10]},{1:[2,3]},o($V2,[2,6]),o($V2,[2,4]),o($V2,[2,5]),{10:[1,11]},{10:$V3,11:[1,12],13:[1,13],15:14,26:$V4},{6:[1,17],7:18,8:5,9:6,10:$V0,16:$V1},{1:[2,2]},{11:[1,19],21:[1,20]},{5:$V5,10:$V6,12:21,29:22,39:$V7,52:24,59:34,60:38,61:39,67:$V8,68:$V9,69:$Va,70:$Vb,71:32,72:31,73:33,74:$Vc,75:$Vd,77:30,78:29,80:28,82:27,83:26,85:25},{10:$Ve,14:45,26:$Vf,33:47,36:$Vg,37:46,39:$Vh,42:$Vi,44:$Vj},{11:[1,54],13:[1,55]},o($Vk,[2,24]),{10:$Vl,28:[1,57],30:56,31:58},{1:[2,1]},o($V2,[2,7]),{5:[1,61],17:[1,60]},{22:62,35:63,36:$Vm},o($V2,[2,8]),o($Vn,[2,58]),{18:[1,65]},o($Vo,[2,60],{53:[1,66],56:[1,67],87:$Vp}),o($Vq,[2,101],{86:$Vr}),o($Vs,[2,99],{84:$Vt}),o($Vu,[2,97],{21:$Vv}),o($Vw,[2,95],{81:$Vx}),o($Vy,[2,93],{79:$Vz}),o($VA,[2,91]),o($VA,[2,89]),o($VA,$VB,{26:[1,74],46:$VC}),{10:$V6,39:$V7,59:34,60:38,61:39,67:$V8,68:$V9,69:$Va,70:$Vb,71:77,72:76,73:33,74:$Vc,75:$Vd},o($VD,[2,81]),o($VE,[2,85]),o($VE,[2,86]),o($VD,$VF),o($VD,[2,67]),o($VD,[2,68]),o($VD,[2,77]),o($VD,[2,78]),o($VD,[2,79]),o($VD,[2,80]),{5:[1,79],10:$VG,62:80,63:78},{11:[1,82]},o($VH,[2,37]),o($VH,[2,56],{45:$VI,46:$VJ,50:[1,83]}),o($VK,[2,38],{21:[1,86]}),{10:[1,87]},{10:$Ve,14:88,26:$Vf,33:47,36:$Vg,37:46,39:$Vh,42:$Vi,44:$Vj},{10:$Ve,14:92,26:$Vf,28:[1,90],33:47,36:$Vg,37:46,39:$Vh,41:89,42:$Vi,44:$Vj,48:91},{10:$Ve,14:93,26:$Vf,33:47,36:$Vg,37:46,39:$Vh,42:$Vi,44:$Vj},{10:$Ve,14:94,26:$Vf,33:47,36:$Vg,37:46,39:$Vh,42:$Vi,44:$Vj},{5:$V5,10:$V6,12:95,29:22,39:$V7,52:24,59:34,60:38,61:39,67:$V8,68:$V9,69:$Va,70:$Vb,71:32,72:31,73:33,74:$Vc,75:$Vd,77:30,78:29,80:28,82:27,83:26,85:25},{10:$Ve,14:96,26:$Vf,33:47,36:$Vg,37:46,39:$Vh,42:$Vi,44:$Vj},{28:[1,97],32:[1,98]},o($Vk,[2,26]),o($VL,[2,27]),o($VL,[2,29],{13:[1,99]}),o($V2,[2,12]),{18:[1,100]},{23:[1,101],32:[1,102]},o($VM,[2,35]),{10:[1,103]},{5:[1,104]},{5:[1,106],10:$VN,54:105,88:107},{10:$V6,39:$V7,52:109,59:34,60:38,61:39,67:$V8,68:$V9,69:$Va,70:$Vb,71:32,72:31,73:33,74:$Vc,75:$Vd,77:30,78:29,80:28,82:27,83:26,85:25},{10:$V6,39:$V7,59:34,60:38,61:39,67:$V8,68:$V9,69:$Va,70:$Vb,71:32,72:31,73:33,74:$Vc,75:$Vd,77:30,78:29,80:28,82:27,83:26,85:110},{10:$V6,39:$V7,59:34,60:38,61:39,67:$V8,68:$V9,69:$Va,70:$Vb,71:32,72:31,73:33,74:$Vc,75:$Vd,77:30,78:29,80:28,82:27,83:111},{10:$V6,39:$V7,59:34,60:38,61:39,67:$V8,68:$V9,69:$Va,70:$Vb,71:32,72:31,73:33,74:$Vc,75:$Vd,77:30,78:29,80:28,82:112},{10:$V6,39:$V7,59:34,60:38,61:39,67:$V8,68:$V9,69:$Va,70:$Vb,71:32,72:31,73:33,74:$Vc,75:$Vd,77:30,78:29,80:113},{10:$V6,39:$V7,59:34,60:38,61:39,67:$V8,68:$V9,69:$Va,70:$Vb,71:32,72:31,73:33,74:$Vc,75:$Vd,77:30,78:114},{10:$V6,39:$V7,59:34,60:38,61:39,67:$V8,68:$V9,69:$Va,70:$Vb,71:32,72:31,73:33,74:$Vc,75:$Vd,77:115},{10:$V6,29:117,39:$V7,52:24,59:34,60:38,61:39,67:$V8,68:$V9,69:$Va,70:$Vb,71:32,72:31,73:33,74:$Vc,75:$Vd,76:116,77:30,78:29,80:28,82:27,83:26,85:25},{10:[1,118]},o($VA,[2,84]),o($VA,$VB,{46:$VC}),{40:[1,119],64:[1,120]},{18:[1,121]},o($VO,[2,70]),{13:[1,122]},{5:$V5,10:$V6,12:123,29:22,39:$V7,52:24,59:34,60:38,61:39,67:$V8,68:$V9,69:$Va,70:$Vb,71:32,72:31,73:33,74:$Vc,75:$Vd,77:30,78:29,80:28,82:27,83:26,85:25},{10:$Ve,26:$Vf,33:124,36:$Vg,39:$Vh,42:$Vi,44:$Vj},o($VK,[2,47]),{10:[1,126],47:125},{10:$Ve,14:129,26:$Vf,33:47,36:$Vg,37:46,38:127,39:$Vh,42:$Vi,44:$Vj,49:128},o($VK,[2,40]),{13:[1,130],40:[1,131]},{28:[1,132],32:[1,133]},o($VK,[2,46]),o($VL,[2,50]),o($VL,[2,52]),{43:[1,134]},{44:[1,135]},o($V2,[2,10]),{11:[1,136]},o($Vk,[2,25]),{10:$Vl,31:137},{10:$Ve,26:$Vf,33:138,36:$Vg,39:$Vh,42:$Vi,44:$Vj},{5:[1,139]},{11:[1,140]},{35:141,36:$Vm},o($VM,[2,34]),{10:$VP,29:144,39:$V7,51:142,52:24,59:34,60:38,61:39,67:$V8,68:$V9,69:$Va,70:$Vb,71:32,72:31,73:33,74:$Vc,75:$Vd,77:30,78:29,80:28,82:27,83:26,85:25,90:143,92:145},o($Vo,[2,61],{64:[1,147]}),{18:[1,148]},o($VQ,[2,104]),{11:[1,149]},{57:[1,150],87:$Vp},o($Vq,[2,102],{86:$Vr}),o($Vs,[2,100],{84:$Vt}),o($Vu,[2,98],{21:$Vv}),o($Vw,[2,96],{81:$Vx}),o($Vy,[2,94],{79:$Vz}),o($VA,[2,92]),{28:[1,151],32:[1,152]},o($VL,[2,87]),o($VD,[2,82]),o($VD,[2,75]),{10:$VG,62:153},{5:[1,154]},{10:$V6,39:$V7,52:156,58:155,59:34,60:38,61:39,67:$V8,68:$V9,69:$Va,70:$Vb,71:32,72:31,73:33,74:$Vc,75:$Vd,77:30,78:29,80:28,82:27,83:26,85:25},o($V2,[2,9]),o($VH,[2,57],{45:$VI,46:$VJ}),o($VK,[2,48]),o($VK,[2,49]),{23:[1,157],32:[1,158]},o($VM,[2,53]),o($VM,[2,55]),{10:$Ve,14:159,26:$Vf,33:47,36:$Vg,37:46,39:$Vh,42:$Vi,44:$Vj},o($VK,[2,44]),o($VK,[2,42]),{10:$Ve,14:92,26:$Vf,33:47,36:$Vg,37:46,39:$Vh,42:$Vi,44:$Vj,48:160},o($VK,[2,43]),o($VK,[2,45]),{5:$V5,10:$V6,12:161,29:22,39:$V7,52:24,59:34,60:38,61:39,67:$V8,68:$V9,69:$Va,70:$Vb,71:32,72:31,73:33,74:$Vc,75:$Vd,77:30,78:29,80:28,82:27,83:26,85:25},o($VL,[2,28]),o($VL,[2,30],{45:$VI,46:$VJ}),{10:$VR,19:162,24:163,25:$VS},{5:[1,166]},o($VM,[2,36]),{5:[1,167],10:$VP,29:144,39:$V7,52:24,59:34,60:38,61:39,67:$V8,68:$V9,69:$Va,70:$Vb,71:32,72:31,73:33,74:$Vc,75:$Vd,77:30,78:29,80:28,82:27,83:26,85:25,90:168,92:145},o($VT,[2,112]),o($VT,[2,109],{91:[1,169]}),o($VT,[2,111]),o([5,10,21,26,39,46,53,56,67,68,69,70,74,75,79,81,84,86,87,91],$VF,{11:[1,170],13:[1,171]}),{10:$VN,88:172},{5:[1,173]},{10:$V6,39:$V7,52:156,58:174,59:34,60:38,61:39,67:$V8,68:$V9,69:$Va,70:$Vb,71:32,72:31,73:33,74:$Vc,75:$Vd,77:30,78:29,80:28,82:27,83:26,85:25},{10:$V6,39:$V7,52:175,59:34,60:38,61:39,67:$V8,68:$V9,69:$Va,70:$Vb,71:32,72:31,73:33,74:$Vc,75:$Vd,77:30,78:29,80:28,82:27,83:26,85:25},o($VA,[2,90]),{10:$V6,29:176,39:$V7,52:24,59:34,60:38,61:39,67:$V8,68:$V9,69:$Va,70:$Vb,71:32,72:31,73:33,74:$Vc,75:$Vd,77:30,78:29,80:28,82:27,83:26,85:25},o($VO,[2,71]),{10:$VU,65:178,66:177},o($VO,[2,69]),o($VV,[2,64],{56:[1,180],87:$Vp}),o($VK,[2,39]),{10:$Ve,14:129,26:$Vf,33:47,36:$Vg,37:46,39:$Vh,42:$Vi,44:$Vj,49:181},{40:[1,182]},o($VL,[2,51]),o($V2,[2,11]),{5:[1,183]},{5:[2,15]},{10:[1,184]},{10:$V3,11:[1,186],13:[1,185],15:187,26:$V4},{18:[1,188]},{20:[1,189]},o($VT,[2,113]),{5:$V5,10:$V6,12:190,29:22,39:$V7,52:24,59:34,60:38,61:39,67:$V8,68:$V9,69:$Va,70:$Vb,71:32,72:31,73:33,74:$Vc,75:$Vd,77:30,78:29,80:28,82:27,83:26,85:25},{5:$V5,10:$V6,12:191,29:22,39:$V7,52:24,59:34,60:38,61:39,67:$V8,68:$V9,69:$Va,70:$Vb,71:32,72:31,73:33,74:$Vc,75:$Vd,77:30,78:29,80:28,82:27,83:26,85:25},{10:$Ve,14:192,26:$Vf,33:47,36:$Vg,37:46,39:$Vh,42:$Vi,44:$Vj},o($VQ,[2,105]),{10:$VW,55:193,89:194},o($VQ,[2,103]),o($Vo,[2,63],{87:$Vp}),o($VL,[2,88]),{5:[1,196]},{5:[2,73]},{13:[1,197]},{10:$V6,39:$V7,52:198,59:34,60:38,61:39,67:$V8,68:$V9,69:$Va,70:$Vb,71:32,72:31,73:33,74:$Vc,75:$Vd,77:30,78:29,80:28,82:27,83:26,85:25},o($VM,[2,54]),o($VK,[2,41]),{10:$VR,20:[1,199],24:200,25:$VS},{5:[2,17],26:[1,201]},{10:$Ve,14:202,26:$Vf,33:47,36:$Vg,37:46,39:$Vh,42:$Vi,44:$Vj},{10:$V6,29:203,39:$V7,52:24,59:34,60:38,61:39,67:$V8,68:$V9,69:$Va,70:$Vb,71:32,72:31,73:33,74:$Vc,75:$Vd,77:30,78:29,80:28,82:27,83:26,85:25},{11:[1,204]},{5:[1,205]},o($Vn,[2,59]),o($VT,[2,110]),o($VT,[2,114]),{11:[1,206]},{5:[1,207]},{5:[2,107]},{11:[1,208]},{10:$VU,20:[1,209],65:210},{10:$V6,29:211,39:$V7,52:24,59:34,60:38,61:39,67:$V8,68:$V9,69:$Va,70:$Vb,71:32,72:31,73:33,74:$Vc,75:$Vd,77:30,78:29,80:28,82:27,83:26,85:25},{57:[1,212],87:$Vp},o($V2,[2,13]),{5:[2,16]},{10:$VX,27:213,28:[1,214],34:215},{5:[2,20],11:[1,217]},{5:[2,22]},{10:$V6,29:218,39:$V7,52:24,59:34,60:38,61:39,67:$V8,68:$V9,69:$Va,70:$Vb,71:32,72:31,73:33,74:$Vc,75:$Vd,77:30,78:29,80:28,82:27,83:26,85:25},{10:$VR,19:219,24:163,25:$VS},{5:$V5,10:$V6,12:220,29:22,39:$V7,52:24,59:34,60:38,61:39,67:$V8,68:$V9,69:$Va,70:$Vb,71:32,72:31,73:33,74:$Vc,75:$Vd,77:30,78:29,80:28,82:27,83:26,85:25},{10:$VW,20:[1,221],89:222},{5:$V5,10:$V6,12:223,29:22,39:$V7,52:24,59:34,60:38,61:39,67:$V8,68:$V9,69:$Va,70:$Vb,71:32,72:31,73:33,74:$Vc,75:$Vd,77:30,78:29,80:28,82:27,83:26,85:25},{5:[1,224]},{5:[2,74]},{5:[2,72]},{10:$V6,39:$V7,52:225,59:34,60:38,61:39,67:$V8,68:$V9,69:$Va,70:$Vb,71:32,72:31,73:33,74:$Vc,75:$Vd,77:30,78:29,80:28,82:27,83:26,85:25},{28:[1,226],32:[1,227]},{5:[2,19]},o($VL,[2,31]),{13:[1,228]},{10:$V6,29:229,39:$V7,52:24,59:34,60:38,61:39,67:$V8,68:$V9,69:$Va,70:$Vb,71:32,72:31,73:33,74:$Vc,75:$Vd,77:30,78:29,80:28,82:27,83:26,85:25},{5:[2,23]},{5:[1,230]},o($VT,[2,115]),o($Vo,[2,62]),{5:[2,108]},{5:[2,106]},{40:[1,231]},o($VV,[2,65],{87:$Vp}),{5:[2,18]},{10:$VX,34:232},{10:$Ve,26:$Vf,33:233,36:$Vg,39:$Vh,42:$Vi,44:$Vj},{5:[2,21]},{10:$VR,20:[1,234],24:200,25:$VS},o($VD,[2,76]),o($VL,[2,32]),o($VL,[2,33],{45:$VI,46:$VJ}),o($V2,[2,14])],
defaultActions: {3:[2,3],10:[2,2],17:[2,1],163:[2,15],178:[2,73],194:[2,107],200:[2,16],203:[2,22],210:[2,74],211:[2,72],214:[2,19],218:[2,23],222:[2,108],223:[2,106],226:[2,18],229:[2,21]},
parseError: function parseError(str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        throw new Error(str);
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    _token_stack:
        function lex() {
            var token;
            token = lexer.lex() || EOF;
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
            return token;
        }
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};

var ast = require("../marla/ast");
//console.log("LEX " + parser.terminals_[r]);
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function (match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex() {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin(condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState() {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules() {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState(n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState(condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:/* skip line comment */
break;
case 1:/* skip line whitespace */
break;
case 2:return 5
break;
case 3:return 18
break;
case 4:return 20
break;
case 5:return 17
break;
case 6:return 16
break;
case 7:return 56
break;
case 8:return 57
break;
case 9:return 53
break;
case 10:return 50
break;
case 11:return 68
break;
case 12:return 67
break;
case 13:return 70
break;
case 14:return 10
break;
case 15:return 84
break;
case 16:return 91
break;
case 17:return 46
break;
case 18:return 79
break;
case 19:return '/'
break;
case 20:return 74
break;
case 21:return 81
break;
case 22:return '^'
break;
case 23:return 11
break;
case 24:return 26
break;
case 25:return 28
break;
case 26:return 21
break;
case 27:return 23
break;
case 28:return 39
break;
case 29:return 40
break;
case 30:return 42
break;
case 31:return 43
break;
case 32:return '\\'
break;
case 33:return 13
break;
case 34:return 64
break;
case 35:return 25
break;
case 36:return 32
break;
case 37:return 45
break;
case 38:return 36
break;
case 39:return 6
break;
case 40:return 'INVALID'
break;
}
},
rules: [/^(?:(\/\/.*?)((\r?\n)))/,/^(?:[\t ])/,/^(?:(\r?\n))/,/^(?:»)/,/^(?:«)/,/^(?:\.\.\.)/,/^(?:type\b)/,/^(?:if\b)/,/^(?:else\b)/,/^(?:where\b)/,/^(?:->)/,/^(?:[0-9]+\b)/,/^(?:[0-9]+(\.[0-9]+)\b)/,/^(?:"(\\.|[^"])*")/,/^(?:[a-zA-Z_]\w*)/,/^(?:==)/,/^(?:=!)/,/^(?:\.)/,/^(?:\*)/,/^(?:\/)/,/^(?:-)/,/^(?:\+)/,/^(?:\^)/,/^(?:=)/,/^(?:\()/,/^(?:\))/,/^(?:<)/,/^(?:>)/,/^(?:\{)/,/^(?:\})/,/^(?:\[)/,/^(?:\])/,/^(?:\\)/,/^(?::)/,/^(?:;)/,/^(?:\|)/,/^(?:,)/,/^(?:\?)/,/^(?:')/,/^(?:$)/,/^(?:.)/],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = parser;
exports.Parser = parser.Parser;
exports.parse = function () { return parser.parse.apply(parser, arguments); };
exports.main = function commonjsMain(args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}