/// Marla AST

type TypeDecl =
	name: String
	params: [String]
	members: [TypeDeclMember]
	
type TypeDeclMember =
	name: String
	| Case(members: [TypeCaseMember])
	| Data(typeref: Typeref, initialValue: Expr?)
	| Method(params: [FunParam], body: Expr)

type Typeref =
	| Named(name: String, args: [Typeref])
	| Member(typeref: Typeref, name: string)
	| Unit	

type RecBinding =
	name: String
	value: Expr

type Expr =
	| Var(name: String)
	| If(predicate: Expr, value: Expr, alternate: Expr)
	| Rec(bindings: [RecBinding], value: Expr)
	| Application(fun: Expr, body: Expr) 

type Literal =
	| String (value:String)
	| Int (value:Int)
	| Float (value:Float)

