/// Marla AST

type Module =	
	members: [ModuleMember]

type ModuleMember =
	name: String
	| Import(url: String)
	| Type(params: [String], members: [TypeMember])
	| Data(typeref: Typeref?, initialValue: Expr?)
	| Fun(params: [FunParam], body: Expr)
	
type FunParam =
	name: String
	typeref: Typeref?

type TypeMember =
	name: String
	| Case(members: [TypeMember])
	| Data(typeref: Typeref?, initialValue: Expr?)
	| Fun(params: [FunParam], returnType: Typeref?, body: [Stmt])

type Typeref =
	| Named(name: String, args: [Typeref])
	| Member(typeref: Typeref, name: string)
	| Unit	

type RecBinding =
	name: String
	value: Expr

type Expr =
	| Literal(literal: Literal)
	| Var(name: String)
	| If(predicate: Expr, value: Expr, alternate: Expr)
	| Rec(bindings: [RecBinding], value: Expr)
	| Apply(fun: Expr, args: [Expr])
	| Member(obj: Expr, member: String)
	| Block(statements: [Stmt])

type Literal =
	| String(value: String)
	| Int(value: Int)
	| Float(value: Float)
	| Bool(value: Bool)
	
type Stmt =
	| Expr(expr: Expr)
	| Assign(left: Expr, value: Expr)
	| Let(name: String, typeref: Typeref?, initialValue: Expr)
	| If(condition: Expr, trueBody: [Stmt], falseBody: [Stmt])
	| For(name: String, collection: Expr, body: [Stmt])
	