/// Languages

import "./ast"


type Document =
	name: String
	code: String
	
type ParseResult =
	module: ast.ModuleDecl
	messages: [String]
	intermediate: Any
	
type CombinedDecls =
	modules: { String: ast.ModuleDecl }
	intermediate: Any
	
type CompileResult =
	messages: [String]
	module: ast.ModuleDecl
	
type FrontEnd =
	parse: Document -> ParseResult
	compile: (Document, ParseResult, CombinedDecls) -> CompileResult
	
type CodeWriter =
	parts!: [String]
	indentString = "    "
	toString () = "".join(this.parts)
	write! s =
		this.writeIndentIfNeeded()
		this.parts.push(s)
	writen! s =
		this.writeIndentIfNeeded()
		this.parts.push(s)
		this.parts.push("\n")
		this.needsIndex <- true
	indent! () =
		this.indentLevel <- this.indentLevel + 1
	outdent! () =
		this.indentLevel <- this.indentLevel - 1
	writeIndentIfNeeded! () =
		if this.needsIndent
			this.needsIndent <- false
			for i = 0..<this.indentLevel
				this.parts.push(this.indentString)	
	
type BackEnd =
	write: CodeWriter -> ()
	
	
type Language =
	name: String
	frontEnd: FrontEnd?
	backEnd: BackEnd?







