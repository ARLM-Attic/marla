/// Languages

//ast = require "./ast"


type Document =
	name: String
	code: String
	
type ParseResult =
	types: { String: TypeDecl }
	intermediate: Any
	

type CombinedDecls =
	types: { String: TypeDecl }
	intermediate: Any
	
type DefsResult =
	types: [ast.TypeDef] 
	
type FrontEnd =
	parse: Document -> ParseResult
	getDefs: (Document, ParseResult, CombinedDecls) -> DefsResult
	
type CodeWriter =
	parts!: [String]
	indentString = "    "
	toString () = "".join(parts)
	write! s =
		writeIndentIfNeeded()
		parts.push(s)
	writen! s =
		writeIndentIfNeeded()
		parts.push(s)
		parts.push("\n")
		needsIndex <- true
	indent! () =
		indentLevel <- indentLevel + 1
	outdent! () =
		indentLevel <- indentLevel - 1
	writeIndentIfNeeded! () =
		if needsIndent then
			needsIndent <- false
			for i = 0..<indentLevel
				parts.push(indentString)	
	
type BackEnd =
	write: CodeWriter -> ()
	
	
type Language =
	name: String
	frontEnd: FrontEnd?
	backEnd: BackEnd?







